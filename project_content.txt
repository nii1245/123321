
üìÅ C:\Users\user\Desktop\12

üìÑ .env
OPENAI_API_KEY=lm-studio
OPENAI_API_BASE=http://localhost:1234/v1
SERPER_API_KEY=your-serper-key


üìÑ advanced_example.py
from crewai import Agent, Task, Crew
from dotenv import load_dotenv
from tools import FileTool, TerminalTool, WebSearchTool, SQLiteTool, HTMLScraperTool
from advanced_tools import JSONTool, APITool, DataAnalysisTool, ImageTool, CSVTool
import os

load_dotenv()

data_scientist = Agent(
    role="Data Scientist",
    goal="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã",
    backstory="–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö, —É–º–µ—é—â–∏–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∏ API.",
    tools=[
        FileTool(), TerminalTool(), WebSearchTool(),
        SQLiteTool(), JSONTool(), APITool(), 
        DataAnalysisTool(), ImageTool(), CSVTool()
    ],
    verbose=True
)

task = Task(
    description="""
    –í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
    
    1. –°–æ–∑–¥–∞–π CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ 5 –≥–æ—Ä–æ–¥–∞—Ö (–Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞—Å–µ–ª–µ–Ω–∏–µ, —Å—Ç—Ä–∞–Ω–∞)
    2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç CSV —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç
    3. –°–æ—Ö—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON —Ñ–∞–π–ª
    4. –°–æ–∑–¥–∞–π SQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç—É–¥–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
    5. –í—ã–ø–æ–ª–Ω–∏ SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º > 1 –º–ª–Ω
    6. –°–∫–∞—á–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º
    
    –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏ –≤ –ø–∞–ø–∫—É 'results'.
    """,
    expected_output="–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.",
    agent=data_scientist
)

crew = Crew(
    agents=[data_scientist],
    tasks=[task]
)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('results'):
        os.makedirs('results')
        
    result = crew.kickoff()
    print("\n\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ===")
    print(result)


üìÑ advanced_tools.py
from crewai_tools import BaseTool
import json
import os
import requests
import time
from PIL import Image
from io import BytesIO
import pandas as pd
import matplotlib.pyplot as plt
import csv

class JSONTool(BaseTool):
    name = "JSONTool"
    description = "–†–∞–±–æ—Ç–∞–µ—Ç —Å JSON –¥–∞–Ω–Ω—ã–º–∏ - —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ."

    def _run(self, action: str, data=None, filename=None):
        if action == "read" and filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {str(e)}"
        elif action == "write" and data and filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                return f"JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ {filename}"
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON: {str(e)}"
        else:
            return "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è JSONTool"

class APITool(BaseTool):
    name = "APITool"
    description = "–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ API."

    def _run(self, url: str, method="GET", headers=None, data=None, params=None):
        try:
            if method.upper() == "GET":
                response = requests.get(url, headers=headers, params=params)
            elif method.upper() == "POST":
                response = requests.post(url, headers=headers, json=data, params=params)
            elif method.upper() == "PUT":
                response = requests.put(url, headers=headers, json=data, params=params)
            elif method.upper() == "DELETE":
                response = requests.delete(url, headers=headers, params=params)
            else:
                return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}"
            
            return {
                "status_code": response.status_code,
                "headers": dict(response.headers),
                "content": response.text[:3000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
            }
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

class DataAnalysisTool(BaseTool):
    name = "DataAnalysisTool"
    description = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV/Excel —Ñ–∞–π–ª–æ–≤."

    def _run(self, filename: str, action="summary"):
        try:
            if filename.endswith('.csv'):
                df = pd.read_csv(filename)
            elif filename.endswith(('.xlsx', '.xls')):
                df = pd.read_excel(filename)
            else:
                return "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSV –∏–ª–∏ Excel."
            
            if action == "summary":
                return {
                    "shape": df.shape,
                    "columns": list(df.columns),
                    "dtypes": str(df.dtypes),
                    "head": df.head(5).to_dict(),
                    "describe": df.describe().to_dict()
                }
            elif action == "plot" and len(df.columns) >= 2:
                plt.figure(figsize=(10, 6))
                plt.scatter(df[df.columns[0]], df[df.columns[1]])
                plt.title(f"{df.columns[0]} vs {df.columns[1]}")
                plt.xlabel(df.columns[0])
                plt.ylabel(df.columns[1])
                plot_file = "data_plot.png"
                plt.savefig(plot_file)
                plt.close()
                return f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {plot_file}"
            else:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

class ImageTool(BaseTool):
    name = "ImageTool"
    description = "–†–∞–±–æ—Ç–∞–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, –±–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞."

    def _run(self, action: str, url=None, path=None, width=None, height=None):
        try:
            if action == "download" and url:
                response = requests.get(url)
                img = Image.open(BytesIO(response.content))
                save_path = path or f"image_{int(time.time())}.jpg"
                img.save(save_path)
                return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {save_path}"
            
            elif action == "resize" and path:
                img = Image.open(path)
                if width and height:
                    resized = img.resize((width, height))
                    save_path = f"resized_{os.path.basename(path)}"
                    resized.save(save_path)
                    return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {save_path}"
                else:
                    return "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —É–∫–∞–∂–∏—Ç–µ width –∏ height"
            else:
                return "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ImageTool"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"

class CSVTool(BaseTool):
    name = "CSVTool"
    description = "–†–∞–±–æ—Ç–∞–µ—Ç —Å CSV —Ñ–∞–π–ª–∞–º–∏ - —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å, –æ–±—Ä–∞–±–æ—Ç–∫–∞."

    def _run(self, action: str, filename=None, data=None):
        try:
            if action == "read" and filename:
                rows = []
                with open(filename, 'r', newline='', encoding='utf-8') as csvfile:
                    reader = csv.DictReader(csvfile)
                    for row in reader:
                        rows.append(dict(row))
                return rows
            
            elif action == "write" and filename and data:
                if not data or not isinstance(data, list) or not isinstance(data[0], dict):
                    return "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π"
                
                fieldnames = data[0].keys()
                with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    writer.writeheader()
                    writer.writerows(data)
                return f"CSV —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ {filename}"
            
            else:
                return "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è CSVTool"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å CSV: {str(e)}"


üìÑ agent.py
from crewai import Agent, Task, Crew
from dotenv import load_dotenv
from tools import FileTool, TerminalTool, WebSearchTool, PDFReaderTool, GitTool, SQLiteTool, HTMLScraperTool
import os

load_dotenv()

developer = Agent(
    role="Full-Stack Autonomous Coder",
    goal="–°–æ–∑–¥–∞–≤–∞—Ç—å, –∑–∞–ø—É—Å–∫–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å –ü–û, –≤—ã–ø–æ–ª–Ω—è—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–µ–π—Å—Ç–≤—É—è –∫–∞–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç",
    backstory="–¢—ã –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä, —Å–ø–æ—Å–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –∫–æ–¥–∏—Ç—å, —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–∞–º–∏, PDF, Git –∏ Web.",
    tools=[
        FileTool(), TerminalTool(), WebSearchTool(),
        PDFReaderTool(), GitTool(), SQLiteTool(), HTMLScraperTool()
    ],
    verbose=True
)

task = Task(
    description="–°–æ–∑–¥–∞–π –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ Python —Å –±–∞–∑–æ–π SQLite –∏ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.",
    expected_output="–ö–æ–¥ –≤ —Ñ–∞–π–ª–µ main.py + –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.",
    agent=developer
)

crew = Crew(
    agents=[developer],
    tasks=[task]
)

if __name__ == "__main__":
    crew.kickoff()


üìÑ Ar.py
import os

def scan_directory_to_txt(root_dir, output_file="project_content.txt"):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É + —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –≤ TXT.
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (>1 –ú–ë).
    """
    with open(output_file, "w", encoding="utf-8") as out_f:
        for root, dirs, files in os.walk(root_dir):
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
            out_f.write(f"\nüìÅ {os.path.abspath(root)}\n")
            
            for file in files:
                file_path = os.path.join(root, file)
                out_f.write(f"\nüìÑ {file}\n")
                
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –∏ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
                    if file.endswith((".png", ".jpg", ".exe", ".dll", ".zip", ".pth", ".bin")):
                        out_f.write("(–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—â–µ–Ω)\n")
                        continue
                    
                    file_size = os.path.getsize(file_path)
                    if file_size > 1_000_000:  # –ù–µ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã >1 MB
                        out_f.write(f"(—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç)\n")
                        continue
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                    with open(file_path, "r", encoding="utf-8") as in_f:
                        content = in_f.read()
                        out_f.write(f"{content}\n")
                except UnicodeDecodeError:
                    out_f.write("(–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞)\n")
                except Exception as e:
                    out_f.write(f"(–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {str(e)})\n")

if __name__ == "__main__":
    target_folder = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: ").strip()
    if not os.path.isdir(target_folder):
        print("–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    else:
        scan_directory_to_txt(target_folder)
        print(f"–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'project_content.txt'.")

üìÑ Ar.py.py
import os

def scan_directory_to_txt(root_dir, output_file="project_content.txt"):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É + —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –≤ TXT.
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (>1 –ú–ë).
    """
    with open(output_file, "w", encoding="utf-8") as out_f:
        for root, dirs, files in os.walk(root_dir):
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
            out_f.write(f"\nüìÅ {os.path.abspath(root)}\n")
            
            for file in files:
                file_path = os.path.join(root, file)
                out_f.write(f"\nüìÑ {file}\n")
                
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –∏ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
                    if file.endswith((".png", ".jpg", ".exe", ".dll", ".zip", ".pth", ".bin")):
                        out_f.write("(–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—â–µ–Ω)\n")
                        continue
                    
                    file_size = os.path.getsize(file_path)
                    if file_size > 1_000_000:  # –ù–µ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã >1 MB
                        out_f.write(f"(—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç)\n")
                        continue
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                    with open(file_path, "r", encoding="utf-8") as in_f:
                        content = in_f.read()
                        out_f.write(f"{content}\n")
                except UnicodeDecodeError:
                    out_f.write("(–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞)\n")
                except Exception as e:
                    out_f.write(f"(–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {str(e)})\n")

if __name__ == "__main__":
    target_folder = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: ").strip()
    if not os.path.isdir(target_folder):
        print("–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    else:
        scan_directory_to_txt(target_folder)
        print(f"–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'project_content.txt'.")

üìÑ bark_cli.py
import nemo.collections.tts as nemo_tts

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å Tacotron2
model = nemo_tts.models.Tacotron2Model.from_pretrained("tts_en_tacotron2")

# –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
text = "Hello, this is a test of NVIDIA NeMo TTS."

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–ª-—Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É
spectrogram = model.parse(text)

# –î–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –∞—É–¥–∏–æ –Ω—É–∂–Ω–∞ WaveGlow
waveglow = nemo_tts.models.WaveGlowModel.from_pretrained("tts_waveglow_88m")

audio = waveglow.convert_spectrogram_to_audio(spec=spectrogram)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
import soundfile as sf
sf.write("output.wav", audio.cpu().numpy(), samplerate=22050)


üìÑ c.py
import torch

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
language = 'ru'
model_id = 'v3_1_ru'  # –ú–æ–¥–µ–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
device = torch.device('cpu')  # –∏–ª–∏ 'cuda' –µ—Å–ª–∏ –µ—Å—Ç—å GPU

model, example_text = torch.hub.load(
    repo_or_dir='snakers4/silero-models',
    model='silero_tts',
    language=language,
    speaker=model_id
)
model.to(device)

# –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–∞ –æ—Ç Silero TTS."
sample_rate = 48000  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
speaker = 'aidar'    # –í–∞—Ä–∏–∞–Ω—Ç—ã: 'aidar', 'baya', 'kseniya', 'xenia', 'random'

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
audio_path = 'output.wav'
model.save_wav(
    text=text,
    speaker=speaker,
    sample_rate=sample_rate,
    audio_path=audio_path
)

print(f"–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {audio_path}")

üìÑ check_tts.py
import os
import sys
from TTS.api import TTS

def main():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TTS...")
    print("–í–µ—Ä—Å–∏—è TTS:", TTS.__version__)
    
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        models = [
            "tts_models/ru/vits",
            "tts_models/en/ljspeech/tacotron2-DDC"
        ]
        
        for model in models:
            print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏: {model}")
            try:
                tts = TTS(model_name=model, progress_bar=False, gpu=False)
                print(f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model}")
                
                if hasattr(tts, 'speakers') and tts.speakers:
                    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {tts.speakers}")
                
                print("–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞...")
                tts.tts_to_file(text="–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç", file_path="test_output.wav")
                print("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test_output.wav")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model}: {str(e)}")
    
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –£–¥–∞–ª–∏—Ç–µ –∫—ç—à TTS: rm -r ~/.local/share/tts")
        print("2. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TTS: pip install --force-reinstall TTS")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")

if __name__ == "__main__":
    main()


üìÑ cmd_assistant.py
import os
import sys
import time
import requests
import json
import datetime
import colorama
from colorama import Fore, Back, Style
import shutil
from pathlib import Path
import os
import threading
import queue
import torch
import numpy as np
import sounddevice as sd
from TTS.api import TTS

# –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–≤–∏–∂–∫—É TTS
tts_queue = queue.Queue()

import os
import json
import requests
import tempfile
import pyttsx3
from pathlib import Path

class VoiceManager:
    def __init__(self):
        self.enabled = False
        self.current_voice = "–º—É–∂—Å–∫–æ–π"
        self.voices = {
            "–º—É–∂—Å–∫–æ–π": {
                "voice": "filipp",  # –ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å
                "emotion": "good"
            },
            "–∂–µ–Ω—Å–∫–∏–π": {
                "voice": "alena",   # –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
                "emotion": "good"
            }
        }
        self.iam_token = None
        self.folder_id = None
        self.engine = None
        self._initialize()
    
    def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –¥–≤–∏–∂–æ–∫"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Yandex Cloud
            config_path = os.path.join(os.path.expanduser('~'), '.yandex', 'config')
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    config = json.load(f)
                    self.iam_token = config.get('iam_token')
                    self.folder_id = config.get('folder_id')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            if not self.iam_token or not self.folder_id:
                print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Yandex Cloud. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å.")
                self._init_system_voice()
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Yandex SpeechKit
            response = requests.post(
                'https://iam.api.cloud.yandex.net/iam/v1/tokens',
                json={"yandexPassportOauthToken": self.iam_token}
            )
            
            if response.status_code != 200:
                print("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Yandex Cloud. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å.")
                self._init_system_voice()
                return False
                
            self.enabled = True
            print("–ì–æ–ª–æ—Å–æ–≤–æ–π –¥–≤–∏–∂–æ–∫ Yandex SpeechKit –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Yandex SpeechKit: {str(e)}")
            self._init_system_voice()
            return False
    
    def _init_system_voice(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"""
        try:
            self.engine = pyttsx3.init()
            voices = self.engine.getProperty('voices')
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞
            ru_voices = [v for v in voices if hasattr(v, 'languages') and any('ru' in lang.lower() for lang in getattr(v, 'languages', []))]
            
            if not ru_voices:
                ru_voices = voices
                
            self.voices["–º—É–∂—Å–∫–æ–π"]["id"] = next((v.id for v in ru_voices if 'male' in v.name.lower() or '–º—É–∂—Å–∫' in v.name.lower() or v == ru_voices[0]), ru_voices[0].id)
            self.voices["–∂–µ–Ω—Å–∫–∏–π"]["id"] = next((v.id for v in ru_voices if 'female' in v.name.lower() or '–∂–µ–Ω—Å–∫' in v.name.lower() or v == ru_voices[-1]), 
                                               ru_voices[-1].id if len(ru_voices) > 1 else ru_voices[0].id)
            
            self.enabled = True
            print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å")
            
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å: {str(e)}")
            self.enabled = False
    
    def _synthesize_speech(self, text, voice, emotion):
        """–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é Yandex SpeechKit"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º IAM —Ç–æ–∫–µ–Ω
            response = requests.post(
                'https://iam.api.cloud.yandex.net/iam/v1/tokens',
                json={"yandexPassportOauthToken": self.iam_token}
            )
            
            if response.status_code != 200:
                raise Exception("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                
            iam_token = response.json().get('iamToken')
            
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å
            headers = {
                'Authorization': f'Bearer {iam_token}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'text': text,
                'lang': 'ru-RU',
                'voice': voice,
                'emotion': emotion,
                'folderId': self.folder_id
            }
            
            response = requests.post(
                'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize',
                headers=headers,
                data=data
            )
            
            if response.status_code != 200:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {response.text}")
                
            return response.content
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ Yandex SpeechKit: {str(e)}")
            raise
    
    def speak(self, text):
        """–û–∑–≤—É—á–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
        if not self.enabled or not text.strip():
            return
            
        def _speak():
            try:
                if hasattr(self, 'engine') and self.engine:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å
                    voice = self.voices[self.current_voice]
                    self.engine.setProperty('voice', voice["id"])
                    self.engine.setProperty('rate', 150)
                    self.engine.setProperty('volume', 0.9)
                    self.engine.say(text)
                    self.engine.runAndWait()
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Yandex SpeechKit
                    voice = self.voices[self.current_voice]
                    audio_content = self._synthesize_speech(
                        text, 
                        voice=voice["voice"],
                        emotion=voice["emotion"]
                    )
                    
                    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
                    with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as f:
                        f.write(audio_content)
                        temp_file = f.name
                    
                    try:
                        import vlc
                        player = vlc.MediaPlayer(temp_file)
                        player.play()
                        
                        # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                        while player.is_playing():
                            import time
                            time.sleep(0.1)
                            
                    finally:
                        try:
                            os.unlink(temp_file)
                        except:
                            pass
                            
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ä–µ—á–∏: {str(e)}")
        
        threading.Thread(target=_speak, daemon=True).start()

    def change_voice(self, voice_name):
        """–ú–µ–Ω—è–µ—Ç –≥–æ–ª–æ—Å"""
        if voice_name not in self.voices:
            return "–¢–∞–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"
            
        if voice_name == self.current_voice:
            return f"–£–∂–µ –≤—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: {voice_name}"
            
        self.current_voice = voice_name
        return f"–ì–æ–ª–æ—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {voice_name}"

    def toggle(self, state=None):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –≥–æ–ª–æ—Å"""
        if state is not None:
            self.enabled = bool(state)
        else:
            self.enabled = not self.enabled
        status = "–≤–∫–ª—é—á–µ–Ω" if self.enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
        return f"–ì–æ–ª–æ—Å {status}"

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        try:
            if hasattr(self, 'engine') and self.engine:
                self.engine.stop()
            return "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {str(e)}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä VoiceManager
voice_manager = VoiceManager()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_BASE_URL = "http://26.224.68.101:1234/v1"
DEFAULT_MODEL = "saiga_mistral_7b_gguf"
DEFAULT_API_KEY = "lm-studio"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
colorama.init()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
BASE_URL = DEFAULT_BASE_URL
MODEL_NAME = DEFAULT_MODEL
API_KEY = DEFAULT_API_KEY

# –ö—ç—à –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
AVAILABLE_MODELS = []

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
MAX_TOKENS = 4000  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏
SYSTEM_PROMPT = """–¢—ã - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ Windows. 

–¢–í–û–ò –ü–†–ê–í–ò–õ–ê:
1. –û—Ç–≤–µ—á–∞–π –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ö–û–†–û–¢–ö–û, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞
2. –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –í–´–ü–û–õ–ù–Ø–ô –∏—Ö —Å–∞–º
3. –ù–ï –æ–±—ä—è—Å–Ω—è–π —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–π —á—Ç–æ –ø—Ä–æ—Å—è—Ç
4. –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ - –≥–æ–≤–æ—Ä–∏ –æ–± —ç—Ç–æ–º
5. –ü—Ä–∏ –æ—à–∏–±–∫–µ - –∫—Ä–∞—Ç–∫–æ —Å–æ–æ–±—â–∏ —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

–ü—Ä–∏–º–µ—Ä—ã:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt
–¢—ã: ‚úì –§–∞–π–ª —Å–æ–∑–¥–∞–Ω

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã
–¢—ã: file1.txt
file2.txt

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø—Ä–∏–≤–µ—Ç
–¢—ã: –ü—Ä–∏–≤–µ—Ç, —è –≥–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –∫–∞–∫ –¥–µ–ª–∞?
–¢—ã: –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É test
–¢—ã: ‚úì –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞

–ü–æ–º–Ω–∏: –ú–ò–ù–ò–ú–£–ú –°–õ–û–í, –ú–ê–ö–°–ò–ú–£–ú –î–ï–ô–°–¢–í–ò–ô!"""

def clear_screen():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª–∞."""
    os.system('cls' if os.name == 'nt' else 'clear')

def print_cmd_header():
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π CMD."""
    clear_screen()
    print(f"Microsoft Windows [Version 10.0.19045.3803]")
    print(f"(c) Microsoft Corporation. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.")
    print()

def get_current_directory():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ CMD."""
    return os.getcwd()

def print_prompt(directory):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    print(f"{directory}>", end=" ")

def execute_system_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        import subprocess
        result = subprocess.run(
            command,
            shell=True,
            text=True,
            capture_output=True,
            encoding='cp866'  # –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤ Windows
        )
        return result.stdout if result.stdout else "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"

def parse_file_creation_command(text):
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø—É—Ç—ë–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
    import re
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–µ–π –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    path_patterns = [
        (r'(?:–≤|–≤–æ|inside|in)\s+(?:–ø–∞–ø–∫[–µ–∏]|–∫–∞—Ç–∞–ª–æ–≥–µ|folder)?\s*([^\s\.]+)', 'in_folder'),
        (r'([^\s\\/]+(?:\\/[^\s\\/]+)*\.[a-zA-Z0-9]+)', 'full_path'),
    ]
    
    # –ò—â–µ–º —à–∞–±–ª–æ–Ω—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    content_templates = {
        '–∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏': 'tictactoe',
        '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä': 'calculator',
        '–∑–∞–º–µ—Ç–∫–∏': 'notes',
        '–∏–≥—Ä—É': 'game',
    }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å
    path = None
    content_type = None
    
    for pattern, ptype in path_patterns:
        match = re.search(pattern, text.lower())
        if match:
            if ptype == 'in_folder':
                folder = match.group(1).strip()
                filename = 'new_file.txt'
                path = f"{folder}/{filename}"
            else:
                path = match.group(1).strip()
            break
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    for keyword, template in content_templates.items():
        if keyword in text.lower():
            content_type = template
            break
    
    return path, content_type

def process_command(command, conversation_history):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    global BASE_URL, MODEL_NAME, API_KEY, voice_manager
    
    command = command.strip()
    response = ""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    if command.lower().startswith("–≥–æ–ª–æ—Å"):
        parts = command.split()
        if len(parts) > 1:
            if parts[1].lower() in ["–≤–∫–ª", "on"]:
                return voice_manager.toggle(True)
            elif parts[1].lower() in ["–≤—ã–∫–ª", "off"]:
                return voice_manager.toggle(False)
            elif parts[1].lower() in voice_manager.voices:
                return voice_manager.change_voice(parts[1].lower())
        return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –≥–æ–ª–æ—Å [–≤–∫–ª/–≤—ã–∫–ª/–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π]"
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    command = command.lower()  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if any(word in command for word in ['—Å–æ–∑–¥–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '—Å–¥–µ–ª–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '—Å–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç']):
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        requirements = analyze_requirements(command)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_structure = generate_app_structure(requirements)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
        results = []
        for path, content in app_structure.items():
            if path.endswith('/'):  # –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                result = create_file(path, None)
            else:
                result = create_file(path, content)
            results.append(result)
        
        return "\n".join(results)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
    if any(word in command.lower() for word in ['—Å–æ–∑–¥–∞–π', '—Å–æ–∑–¥–∞—Ç—å', '–Ω–∞–ø–∏—à–∏', '—Å–¥–µ–ª–∞–π']):
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø—É—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        path, _ = parse_file_creation_command(command)
        if path:
            return create_file(path)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏
    if '–≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏' in command.lower() or '–≤ –ø–∞–ø–∫–µ' in command.lower():
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ –∏ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
        parts = re.split(r'–≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏|–≤ –ø–∞–ø–∫–µ', command, flags=re.IGNORECASE)
        if len(parts) > 1:
            folder = parts[1].strip().split()[0]
            rest_command = ' '.join(parts[1].strip().split()[1:])
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not os.path.exists(folder):
                os.makedirs(folder, exist_ok=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏
            if any(cmd in rest_command.lower() for cmd in ['—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª', '—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª']):
                filename = rest_command.split('—Ñ–∞–π–ª')[-1].strip()
                return create_file(os.path.join(folder, filename))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    if command.lower() == '–º–µ–Ω—é':
        return show_interactive_menu()
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏
    if command.lower().startswith("—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª") or command.lower().startswith("—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª"):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            parts = command.split()
            if len(parts) < 3:
                return "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞"
                
            filename = ' '.join(parts[2:]).strip('"\'')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .txt, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            if not os.path.splitext(filename)[1]:
                filename += ".txt"
                
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            os.makedirs(os.path.dirname(filename), exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    pass
                return f"‚úì –§–∞–π–ª {os.path.abspath(filename)} —Å–æ–∑–¥–∞–Ω"
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    elif command.lower().startswith("—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É") or command.lower().startswith("—Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É"):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            parts = command.split()
            if len(parts) < 3:
                return "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏"
                
            dirname = ' '.join(parts[2:]).strip('"\'')
            return create_folder(dirname)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    elif command.lower().startswith("–ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã") or command.lower().startswith("–ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã"):
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            result = f"–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {os.getcwd()}\n"
            result += "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
            items = os.listdir()
            for item in items:
                full_path = os.path.join(os.getcwd(), item)
                if os.path.isdir(full_path):
                    result += f"[–ü–∞–ø–∫–∞] {item}"
                else:
                    result += f"[–§–∞–π–ª]  {item}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if os.path.isfile(full_path):
                    size = os.path.getsize(full_path)
                    if size < 1024:
                        size_str = f"{size} –±–∞–π—Ç"
                    elif size < 1024*1024:
                        size_str = f"{size/1024:.1f} –ö–ë"
                    else:
                        size_str = f"{size/(1024*1024):.1f} –ú–ë"
                    result += f" ({size_str})"
                result += "\n"
                
            return result.strip()
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}"
    
    elif command.lower() == 'cls' or command.lower() == '–æ—á–∏—Å—Ç–∏—Ç—å':
        os.system('cls')
        return ""
        
    elif command.lower() == '–ø–æ–º–æ—â—å':
        show_full_help()
        return ""
        
    elif command.lower() == '—Å–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏':
        global MODEL_NAME
        MODEL_NAME = select_model()
        return f"‚úì –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {MODEL_NAME}"
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
    return None

def count_tokens(text):
    """–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ (1 —Ç–æ–∫–µ–Ω ~ 4 —Å–∏–º–≤–æ–ª–∞)"""
    return len(str(text)) // 4

def prepare_messages(history, user_message):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É"""
    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    total_tokens = count_tokens(SYSTEM_PROMPT) + count_tokens(user_message)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –ª–∏–º–∏—Ç–∞
    for msg in reversed(history):
        msg_tokens = count_tokens(msg["content"])
        if total_tokens + msg_tokens > MAX_TOKENS - 500:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            break
        messages.insert(1, msg)  # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ (–ø–æ—Å–ª–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
        total_tokens += msg_tokens
    
    messages.append({"role": "user", "content": user_message})
    return messages

def send_to_ai(message, conversation_history):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ AI –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    global BASE_URL, MODEL_NAME, API_KEY, voice_manager
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    command_response = process_command(message, conversation_history)
    if command_response is not None:
        if command_response:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã, –≤—ã–≤–æ–¥–∏–º –µ–≥–æ
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
            simulate_typing(command_response, delay=0.005)
            print("\n")
        return command_response
        
    try:
        print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...", end="\r")
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {API_KEY}"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        messages = prepare_messages(conversation_history, message)
        
        data = {
            "model": MODEL_NAME,
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 2000,
            "stream": False
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = requests.post(
            f"{BASE_URL}/chat/completions", 
            headers=headers,
            json=data,
            timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        )
        
        if response.status_code == 200:
            result = response.json()
            ai_response = result["choices"][0]["message"]["content"].strip()
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—á–∞—Ç–∏
            if ai_response:  # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                print("\n")  # –î–≤–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
                simulate_typing(ai_response, delay=0.005)
                print("\n")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
                
                # –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –≥–æ–ª–æ—Å –≤–∫–ª—é—á–µ–Ω
                if voice_manager.enabled and ai_response.strip():
                    voice_manager.speak(ai_response)
            
            return ai_response
        else:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}"
            if response.text:
                error_msg += f"\n–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}"
            print(f"\n{error_msg}\n")
            return error_msg
    except Exception as e:
        error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        print(f"\n{error_msg}\n")
        return error_msg

def simulate_typing(text, delay=0.01):
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–µ—á–∞—Ç–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–∞–∫ –≤ CMD."""
    for char in text:
        print(char, end='', flush=True)
        time.sleep(delay)
    print()

def get_available_models():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞."""
    global AVAILABLE_MODELS
    try:
        print("\n–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...")
        response = requests.get(f"{BASE_URL}/models")
        if response.status_code == 200:
            models_data = response.json()
            AVAILABLE_MODELS = [model["id"] for model in models_data.get("data", [])]
            return AVAILABLE_MODELS
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")
    return []

def show_interactive_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    menu = [
        "1. –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª",
        "2. –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É",
        "3. –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã",
        "4. –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
        "5. –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å",
        "6. –í—ã—Ö–æ–¥"
    ]
    
    print("\n–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:")
    for item in menu:
        print(f"  {item}")
    
    while True:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç (1-6): ")
        if choice == '1':
            filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ")
            return f"—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª {filename}"
        elif choice == '2':
            dirname = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏: ")
            return f"—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É {dirname}"
        elif choice == '3':
            return "–ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã"
        elif choice == '4':
            return "–æ—á–∏—Å—Ç–∏—Ç—å"
        elif choice == '5':
            return "—Å–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏"
        elif choice == '6':
            return "–≤—ã—Ö–æ–¥"
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def analyze_requirements(prompt):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_type = "console"
    if any(word in prompt.lower() for word in ['–≤–µ–±', '—Å–∞–π—Ç', 'web']):
        app_type = "web"
    elif any(word in prompt.lower() for word in ['gui', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–æ–∫–Ω–æ']):
        app_type = "gui"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    components = []
    if any(word in prompt.lower() for word in ['–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–±–¥', 'sql']):
        components.append("database")
    if any(word in prompt.lower() for word in ['—Ñ–∞–π–ª', '–¥–æ–∫—É–º–µ–Ω—Ç']):
        components.append("file_operations")
    if any(word in prompt.lower() for word in ['api', '–∑–∞–ø—Ä–æ—Å']):
        components.append("api")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    language = "python"
    if any(word in prompt.lower() for word in ['javascript', 'js', 'node']):
        language = "javascript"
    elif any(word in prompt.lower() for word in ['java']):
        language = "java"
    
    return {
        "app_type": app_type,
        "components": components,
        "language": language,
        "name": "my_app"
    }

def generate_app_structure(requirements):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    structure = {}
    app_name = requirements["name"]
    
    # –ë–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ª—é–±–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    structure["README.md"] = f"# {app_name}\n\n–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    structure["requirements.txt"] = ""
    
    # –§–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if requirements["app_type"] == "web":
        structure["app.py"] = """from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def home():
    return '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!'

if __name__ == '__main__':
    app.run(debug=True)"""
        structure["requirements.txt"] += "flask==2.0.1\n"
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        structure["templates/"] = ""
        structure["static/"] = ""
        structure["static/css/"] = ""
        structure["static/js/"] = ""
        
    elif requirements["app_type"] == "gui":
        structure["main.py"] = """import tkinter as tk
from tkinter import ttk

class App:
    def __init__(self, root):
        self.root = root
        self.root.title(\"\"\"My App\"\"\")
        self.setup_ui()
    
    def setup_ui(self):
        # –°–æ–∑–¥–∞–µ–º –∏ —Ä–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.label = ttk.Label(self.root, text=\"–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\")
        self.label.pack(padx=20, pady=20)
        
        self.button = ttk.Button(self.root, text=\"–ù–∞–∂–º–∏ –º–µ–Ω—è\", command=self.on_click)
        self.button.pack(pady=10)
    
    def on_click(self):
        self.label.config(text=\"–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!\")

if __name__ == \"__main__\":
    root = tk.Tk()
    app = App(root)
    root.mainloop()"""
        structure["requirements.txt"] += "customtkinter==5.2.0\n"
    
    else:  # console app
        structure["main.py"] = """def main():
    print(\"–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\")

if __name__ == \"__main__\":
    main()"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if "database" in requirements["components"]:
        structure["models/"] = ""
        structure["models/__init__.py"] = ""
        structure["models/database.py"] = """from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_URL = \"sqlite:///./app.db\"

engine = create_engine(DATABASE_URL, connect_args={\"check_same_thread\": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()"""
        structure["requirements.txt"] += "sqlalchemy==2.0.0\n"
    
    if "api" in requirements["components"]:
        structure["api/"] = ""
        structure["api/__init__.py"] = ""
        structure["api/routes.py"] = """from fastapi import APIRouter, Depends, HTTPException

router = APIRouter()

@router.get(\"/items/\")
async def read_items():
    return [{\"id\": 1, \"name\": \"Item 1\"}]"""
        structure["requirements.txt"] += "fastapi==0.104.0\nuvicorn==0.23.2\n"
    
    return structure

def create_file(filename, content=None):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        dirname = os.path.dirname(filename)
        if dirname and not os.path.exists(dirname):
            os.makedirs(dirname, exist_ok=True)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –µ—ë
        if filename.endswith('/'):
            os.makedirs(filename, exist_ok=True)
            return f"‚úì –ü–∞–ø–∫–∞ {os.path.abspath(filename)} —Å–æ–∑–¥–∞–Ω–∞"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
        with open(filename, 'w', encoding='utf-8') as f:
            if content is not None:
                f.write(content)
        
        return f"‚úì –§–∞–π–ª {os.path.abspath(filename)} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {filename}: {str(e)}"

def create_folder(dirname):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
    try:
        os.makedirs(dirname, exist_ok=True)
        return f"‚úì –ü–∞–ø–∫–∞ {os.path.abspath(dirname)} —Å–æ–∑–¥–∞–Ω–∞"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}"

def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º."""
    help_text = """
–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:

–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:
  —Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É [–∏–º—è]    - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É
  —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª [–∏–º—è]     - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
  –ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã          - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
  –º–µ–Ω—é                  - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é

–®–∞–±–ª–æ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:
  —Å–æ–∑–¥–∞–π –∏–≥—Ä—É –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
  —Å–æ–∑–¥–∞–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
  —Å–æ–∑–¥–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫

–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:
  —Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç
  —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª main.py –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç
  —Å–æ–∑–¥–∞–π –∏–≥—Ä—É –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ –≤ –ø–∞–ø–∫–µ –∏–≥—Ä—ã

–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  –æ—á–∏—Å—Ç–∏—Ç—å / cls        - –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω
  —Å–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏          - –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –ò–ò
  –ø–æ–º–æ—â—å                - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  –≤—ã—Ö–æ–¥ / exit          - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã

–°–û–í–ï–¢: –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å, –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!
"""
    print(help_text)

def select_model():
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö."""
    models = get_available_models()
    if not models:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return DEFAULT_MODEL
    
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for i, model in enumerate(models, 1):
        print(f"{i}. {model}")
    
    while True:
        try:
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): ").strip()
            if not choice:
                return DEFAULT_MODEL
            choice = int(choice) - 1
            if 0 <= choice < len(models):
                return models[choice]
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def save_conversation_history(history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–∞–π–ª"""
    try:
        with open('conversation_history.json', 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")

def load_conversation_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists('conversation_history.json'):
            with open('conversation_history.json', 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")
    return []

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print_cmd_header()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    conversation_history = load_conversation_history()
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    global MODEL_NAME
    MODEL_NAME = select_model()
    
    current_dir = get_current_directory()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\n" + "="*60)
    print("AI-–ê–°–°–ò–°–¢–ï–ù–¢ –ó–ê–ü–£–©–ï–ù".center(60))
    print("="*60)
    print(f"–ú–æ–¥–µ–ª—å: {MODEL_NAME}")
    print(f"–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {current_dir}")
    print("-"*60)
    show_help()
    print("-"*60)
    
    while True:
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        print_prompt(current_dir)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_input = input()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
        if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            save_conversation_history(conversation_history[-100:])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
            break
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            if user_input.strip():
                conversation_history.append({"role": "user", "content": user_input.strip()})
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI
            response = send_to_ai(user_input.strip(), conversation_history)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if response and response.strip():
                conversation_history.append({"role": "assistant", "content": response.strip()})
            
            # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            if len(conversation_history) % 5 == 0:
                save_conversation_history(conversation_history[-100:])
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞: {str(e)}"
            print(f"\n{error_msg}\n")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        colorama.deinit()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ colorama


üìÑ conversation_history.json
[
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç "
  },
  {
    "role": "assistant",
    "content": "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã."
  },
  {
    "role": "user",
    "content": "–∫–∞–∫ –¥–µ–ª–∞ ? "
  },
  {
    "role": "assistant",
    "content": "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ!"
  },
  {
    "role": "user",
    "content": "—Ä–∞—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ "
  },
  {
    "role": "assistant",
    "content": "–Ø —É—Ç–∏–ª–∏—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ Windows. –ú–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å, –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏, –∞ —Ç–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏.\n\n"
  },
  {
    "role": "user",
    "content": "–∞ –±–æ–ª—å—à–µ —Ç—ã –Ω–∏—á–µ–≥–æ –æ —Å–µ–±–µ –Ω–µ –∑–Ω–∞–µ—à—å ? "
  },
  {
    "role": "assistant",
    "content": "–ù–µ—Ç, –º–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–µ—â–µ–π! –ù–∞–ø—Ä–∏–º–µ—Ä, —è —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —á–∏—Å–ª–∞–º–∏, –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –Ω–∏–º–∏. –Ø —Ç–∞–∫–∂–µ –∑–Ω–∞—é –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∏ –æ–ø—Ü–∏—è—Ö –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –≤ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏."
  },
  {
    "role": "user",
    "content": "—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É test "
  },
  {
    "role": "assistant",
    "content": "‚úì –ü–∞–ø–∫–∞ test —Å–æ–∑–¥–∞–Ω–∞"
  },
  {
    "role": "user",
    "content": "—Å–æ–∑–¥–∞–π –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –ø–∞–ø–∫–∏ —Ñ–∞–π–ª test "
  },
  {
    "role": "assistant",
    "content": "‚úì –§–∞–π–ª test —Å–æ–∑–¥–∞–Ω\n\n"
  },
  {
    "role": "user",
    "content": "—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test "
  },
  {
    "role": "assistant",
    "content": "test.txt"
  },
  {
    "role": "user",
    "content": "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt"
  },
  {
    "role": "assistant",
    "content": "‚úì –§–∞–π–ª test.txt —Å–æ–∑–¥–∞–Ω"
  },
  {
    "role": "user",
    "content": "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test"
  },
  {
    "role": "assistant",
    "content": "‚úì –§–∞–π–ª test.txt –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test —Å–æ–∑–¥–∞–Ω"
  },
  {
    "role": "user",
    "content": "–≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt "
  },
  {
    "role": "assistant",
    "content": "‚úì –§–∞–π–ª test.txt –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test —Å–æ–∑–¥–∞–Ω"
  },
  {
    "role": "user",
    "content": "–≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt "
  },
  {
    "role": "assistant",
    "content": "‚úì –§–∞–π–ª test.txt –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test —Å–æ–∑–¥–∞–Ω"
  },
  {
    "role": "user",
    "content": "—Ç—ã —Ç—É—Ç ? "
  },
  {
    "role": "assistant",
    "content": "–î–∞, —è –∑–¥–µ—Å—å, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!"
  },
  {
    "role": "user",
    "content": "–∞ –º–æ–≥—É —è –¥–∞—Ç—å—Ç–µ–±–µ –∏–º—è ? "
  },
  {
    "role": "assistant",
    "content": "–ö–æ–Ω–µ—á–Ω–æ! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞—Ç—å?"
  },
  {
    "role": "user",
    "content": "–ù–µ–π—Ä–æ–Ω"
  },
  {
    "role": "assistant",
    "content": "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –∫–∞–∫ –∫ –ù–µ–π—Ä–æ–Ω—É.\n\n"
  },
  {
    "role": "user",
    "content": "–í—Å–º—ã—Å–ª–µ ? —è —Ç–µ–±–µ –∏–º—è –¥–∞—Ç—å —Ö–æ—Ç–µ–ª , —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –≤–æ–æ–±—â–µ –º–µ–Ω—è ? "
  },
  {
    "role": "assistant",
    "content": "–î–∞, —è –ø–æ–Ω–∏–º–∞—é –≤–∞—Å! –í—ã —Ö–æ—Ç–µ–ª–∏ –º–Ω–µ –¥–∞—Ç—å –∏–º—è, –∞ —Ç–∞–∫–∂–µ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –Ω–µ–≥–æ."
  },
  {
    "role": "user",
    "content": "–≤–æ—Ç —á—Ç–æ—Ç—ã —Å–µ–π—á–∞—Å —Å–∫–∞–∑–∞–ª ? –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∫–æ–≥–æ ? "
  },
  {
    "role": "assistant",
    "content": "–í–æ—Ç —á—Ç–æ —è —Å–µ–π—á–∞—Å —Å–∫–∞–∑–∞–ª - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –∫–∞–∫ –∫ –ù–µ–π—Ä–æ–Ω—É."
  },
  {
    "role": "user",
    "content": "–±–ª—è—è—è—è—è , —Å—É–∫–∞ –≤—Ä—É–±–∏—Å—å —É–∂–µ , —è —Ç–µ–±—è —Ç–∞–∫ –Ω–∞–∑–≤–∞—Ç—å —Ö–æ—Ç–µ–ª ! "
  },
  {
    "role": "assistant",
    "content": "–Ø –∏–∑–≤–∏–Ω—è—é—Å—å –∑–∞ –Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –∫–∞–∫ –∫ –ù–µ–π—Ä–æ–Ω—É."
  },
  {
    "role": "user",
    "content": "—Ç—ã –¥—É—Ä–∞–∫ —Å—É–∫–∞ ?)) "
  },
  {
    "role": "assistant",
    "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è. –ú—ã –∑–¥–µ—Å—å —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –Ø –±—É–¥—É —Ä–∞–¥ –≤–∞–º –ø–æ–º–æ—á—å –≤ –ª—é–±–æ–º –≤–æ–ø—Ä–æ—Å–µ!"
  },
  {
    "role": "user",
    "content": "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç ? "
  },
  {
    "role": "assistant",
    "content": "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–µ–π—Ä–æ–Ω."
  },
  {
    "role": "user",
    "content": "–∞ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –±–æ–ª—å—à–µ —é–º–æ—Ä–∞ ? "
  },
  {
    "role": "assistant",
    "content": "–ö–æ–Ω–µ—á–Ω–æ! –Ø —Ä–∞–¥, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å–ª—ã—à–∞—Ç—å –º–æ–∏ —à—É—Ç–∫–∏ –∏ —Å–º–µ—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–≤–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã!"
  },
  {
    "role": "user",
    "content": "–ø—Ä–æ–¥–æ–ª–∂–∏ —à—É—Ç–∫—É, –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–∞—Ä –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç , –µ—Å—Ç—å –ª–∏ –ø–∏–≤–æ? –±–∞—Ä–º–µ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç - –î–ê ! –î–∞–ª—å—à–µ..... \\"
  },
  {
    "role": "assistant",
    "content": "\"–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≥–∏, –æ–±—Ä–∞–¥–æ–≤–∞–≤—à–∏—Å—å, –∏ –≥–æ–≤–æ—Ä–∏—Ç: '–û–≥–æ, —É –Ω–∏—Ö –¥–∞–∂–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç!'\"\n\n"
  },
  {
    "role": "user",
    "content": "—Ç–µ–±–µ –Ω–µ –∫–∞–∂–µ—Ç—å—Å—è —á—Ç–æ –±—ã–ª–æ –±—ã –∑–∞–±–∞–≤–Ω–µ–µ –µ—Å–ª–∏ –±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏–ª —É –±–∞—Ä–º–µ–Ω–∞ : –ê –µ—Å–ª–∏ –Ω–µ—Ç ? "
  },
  {
    "role": "assistant",
    "content": "–î–∞, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–±–∞–≤–Ω–æ! –ï—Å–ª–∏ –±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Å–ø—Ä–æ—Å–∏–ª —É –±–∞—Ä–º–µ–Ω–∞: '–ê –µ—Å–ª–∏ –Ω–µ—Ç?', —Ç–æ –ø–æ–ª—É—á–∏–ª –±—ã –æ—Ç–≤–µ—Ç: '–ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ!'"
  },
  {
    "role": "user",
    "content": "–¥–∞ —É–∂ , —Å–æ–º–Ω–µ–≤–∞—é—Å—å —è —á—Ç–æ —Ç—ã –≤—ã–∫—É–ø–∞–µ—à—å —é–º–æ—Ä ) "
  },
  {
    "role": "assistant",
    "content": "–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –±—ã–ª —Å–∞–º—ã–π –ª—É—á—à–∏–π —é–º–æ—Ä! –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏. –ï—Å–ª–∏ –≤–∞–º —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º, —Ç–æ –ø—Ä–æ—Å–∏–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è.\n\n"
  },
  {
    "role": "user",
    "content": "—Å–ª—É—à–∞–π , –∞ –º–æ–≥—É –ª–∏ —è —Å–¥–µ–ª–∞—Ç—å —Ç–µ–±—è —É–º–Ω–µ–µ ? –∫–∞–∫–∏–º–∏ —Ç–æ –ø—Ä–æ–º—Ç–∞–º–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä ? –∫–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å ? "
  },
  {
    "role": "assistant",
    "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –º–Ω–µ –Ω–µ–ª—å–∑—è –ø–æ–≤—ã—à–∞—Ç—å —Å–≤–æ—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã. –Ø —É–∂–µ –∏–º–µ—é –≤—Å–µ –∑–Ω–∞–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Windows."
  },
  {
    "role": "user",
    "content": "–Ω—É –ø–æ–∫–∞ —á—Ç–æ –¥–∞–ª–µ–∫–æ –Ω–µ –≤—Å–µ ) "
  },
  {
    "role": "assistant",
    "content": "–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å! –ú—ã –º–æ–∂–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–∑–Ω–∞–≤–∞—Ç—å –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è –≤ –Ω–∞—à–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö –∏ —Ñ—É–Ω–∫—Ü–∏—è—Ö, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –µ—â–µ –±–æ–ª—å—à–µ. –Ø —Ä–∞–¥ –±—ã—Ç—å —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞!"
  },
  {
    "role": "user",
    "content": "–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—ã –ª–æ–∫–∞–ª—å–Ω–∞—è –∏—Å—Å–∫—É—Å—Ç–≤–µ–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –º–æ–µ–º –ø–∫ , —è –ø—ã—Ç–∞—Å—å —Ä–∞–≤—à–∏—Ä–∏—Ç—å –æ–±–ª–∞—Å—Ç—å —Ç–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ —Ç–æ –≤—Ä–æ–¥–µ –¥–∂–∞—Ä–≤–∏—Å–∞ –∏–∑ –∂–µ–ª–µ–∑–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ , –ø–æ–Ω–∏–º–∞–µ—à—å –æ —á–µ–º —è ? "
  },
  {
    "role": "assistant",
    "content": "–Ø –ø–æ–Ω–∏–º–∞—é. –í—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º."
  },
  {
    "role": "user",
    "content": "–¥–∞ , –≥–æ—Ä—è–∑–¥–æ –±–æ–ª–µ–µ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º "
  },
  {
    "role": "assistant",
    "content": "–ö–æ–Ω–µ—á–Ω–æ! –ú—ã –º–æ–∂–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–ª—É—á—à–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –µ—â–µ –±–æ–ª—å—à–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –∑–∞–ø—Ä–æ—Å–∞—Ö. –Ø —Ä–∞–¥ –±—ã—Ç—å —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–∞—Å!\n\n"
  },
  {
    "role": "user",
    "content": "–∞ —Ç—ã –º–æ–≥ –±—ã —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –º–µ–Ω—è –ø–∞–ø–∫—É —Å –∏–≥—Ä–æ–π –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏ ? "
  },
  {
    "role": "assistant",
    "content": "–ö–æ–Ω–µ—á–Ω–æ, —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤ —ç—Ç–æ–º. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É —Å –∏–≥—Ä–æ–π \"–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\", –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π:\n```bash\nmkdir TicTacToe\n```"
  },
  {
    "role": "user",
    "content": "–∞ —Å–∞–º —Ç—ã —Å–¥–µ–ª–∞—Ç—å –Ω–µ –º–æ–∂–µ—à—å ? "
  },
  {
    "role": "assistant",
    "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∫–∞–∫ —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ Windows, —è –Ω–µ –º–æ–≥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ \"–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\". –û–¥–Ω–∞–∫–æ, —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–∞–ø–∫–∏ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–≥—Ä—ã –≤ —ç—Ç—É –ø–∞–ø–∫—É.\n\n"
  },
  {
    "role": "user",
    "content": "–∞ –∏–≥—Ä—É —Å–æ–∑–¥–∞—Ç—å —Ç—ã –º–æ–∂–µ—à—å ? "
  },
  {
    "role": "assistant",
    "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–∞–∫ —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ Windows, —è –Ω–µ –º–æ–≥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–ª–∏ –∏–≥—Ä—ã. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–µ—Ä—Å–∏–π –∏–≥—Ä –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–º –∏—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ \"–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\" –Ω–∞ —Å–≤–æ–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ."
  },
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç "
  },
  {
    "role": "assistant",
    "content": "–ü—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "user",
    "content": "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ "
  },
  {
    "role": "assistant",
    "content": "–Ø - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥ –≤ Windows."
  },
  {
    "role": "user",
    "content": "–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ ? "
  },
  {
    "role": "assistant",
    "content": "–Ø - –º–æ–¥–µ–ª—å —è–∑—ã–∫–æ–≤–æ–π —Å–≤—è–∑–∏ \"–î–∞–ª—ë–∫\" –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ \"–Ø–Ω–¥–µ–∫—Å\". –ú–æ—è –∑–∞–¥–∞—á–∞ - –æ–±—É—á–∞—Ç—å –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã. –Ø –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ."
  },
  {
    "role": "user",
    "content": "–∞ —Ç—ã —Ä–∞–∑–≤–µ –Ω–µ –º–∏—Å—Ç—Ä–∞–ª –Ω–µ–º–æ ? "
  },
  {
    "role": "assistant",
    "content": "–ù–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ù–µ–π—Ä–æ–Ω. –Ø ‚Äî –º–æ–¥–µ–ª—å –æ—Ç Mistral AI."
  },
  {
    "role": "user",
    "content": "—Ç–∞–∫ –ª–∞–¥–Ω–æ , —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–æ–Ω–∏–º–∞—Ç—å –∫–∞–∫ —Ö–æ—Ä–æ—à–æ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –∏ –≤–æ–æ—â–µ –≤ —Ü–µ–ª–æ–º –º–æ—é —Ä–µ—á—å ? "
  },
  {
    "role": "assistant",
    "content": "–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—Å."
  },
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "assistant",
    "content": "‚úì –ü—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "assistant",
    "content": "‚úì –ü—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "user",
    "content": "–≥–æ–ª–æ—Å —Å–∏—Å—Ç–µ–º–Ω—ã–π"
  },
  {
    "role": "assistant",
    "content": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –≥–æ–ª–æ—Å [–≤–∫–ª/–≤—ã–∫–ª/–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π]"
  },
  {
    "role": "user",
    "content": "–≥–æ–ª–æ—Å –º—É–∂—Å–∫–æ–π"
  },
  {
    "role": "assistant",
    "content": "–ì–æ–ª–æ—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –º—É–∂—Å–∫–æ–π (—Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å)"
  },
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "assistant",
    "content": "‚úì –ü—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "assistant",
    "content": "‚úì –ü—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "assistant",
    "content": "‚úì –ü—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "user",
    "content": "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ"
  },
  {
    "role": "assistant",
    "content": "–Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥ –≤ Windows."
  },
  {
    "role": "user",
    "content": "–∞ –ø–æ–¥—Ä–æ–±–Ω–Ω–µ , —Ç—ã –≤–µ–¥—å –ª–æ–∫–∞–ª—å–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–∫–∞ , —Ç—ã –≤ –∫—É—Ä—Å–µ ?"
  },
  {
    "role": "assistant",
    "content": "–ù–µ—Ç."
  },
  {
    "role": "user",
    "content": "–Ω–µ –±—É–¥—å —Ç–∞–∫–∏–º –∫—Ä–∞—Ç–∫–∏–º , –æ—Ç–≤–µ—á–∞–π –±–æ–ª–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ"
  },
  {
    "role": "assistant",
    "content": "OK. How can I assist you today?"
  }
]

üìÑ coqui_tts_test.py
import os
import torch
from TTS.api import TTS
import sounddevice as sd
import numpy as np
import soundfile as sf
import tempfile

def test_coqui_tts():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Coqui TTS...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫—É—é VITS –º–æ–¥–µ–ª—å
    model_name = "tts_models/ru/vits"
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        tts = TTS(model_name=model_name, progress_bar=False, gpu=torch.cuda.is_available())
        print(f"–ú–æ–¥–µ–ª—å {model_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏–∫–µ—Ä—ã
        speakers = ["aidar", "baya", "kseniya", "xenia", "eugene"]
        
        while True:
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
            for i, speaker in enumerate(speakers):
                print(f"{i+1}. {speaker}")
            print("0. –í—ã—Ö–æ–¥")
            
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å (–∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
                if choice == "0":
                    break
                    
                speaker_idx = int(choice) - 1
                if 0 <= speaker_idx < len(speakers):
                    speaker = speakers[speaker_idx]
                    text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: ").strip()
                    
                    if not text:
                        text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–∞."
                    
                    print(f"\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ —Å –≥–æ–ª–æ—Å–æ–º {speaker}...")
                    
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
                    with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as f:
                        temp_file = f.name
                    
                    try:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å
                        tts.tts_to_file(
                            text=text,
                            file_path=temp_file,
                            speaker=speaker
                        )
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
                        data, samplerate = sf.read(temp_file)
                        
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
                        max_volume = np.max(np.abs(data))
                        if max_volume > 0:
                            data = data * (0.9 / max_volume)
                        
                        print("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ... (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
                        sd.play(data, samplerate)
                        sd.wait()
                        
                    finally:
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        try:
                            os.unlink(temp_file)
                        except:
                            pass
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞")
                    
            except (ValueError, KeyboardInterrupt):
                print("\n–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é...")
                continue
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Coqui TTS: {str(e)}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞.")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: tts --model_name tts_models/ru/vits --list_speaker_idxs")

if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç Coqui TTS ===\n")
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CUDA:", "–î–æ—Å—Ç—É–ø–Ω–æ" if torch.cuda.is_available() else "–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
    test_coqui_tts()


üìÑ debug_api.py
import requests
import json
import time
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
base_url = "http://26.224.68.101:1234/v1"
model_name = "saiga_mistral_7b_gguf"
api_key = "lm-studio"  # –î–ª—è LM Studio —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ –Ω–µ –≤–∞–∂–Ω–æ

def print_step(step, message):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ –æ—Ç–ª–∞–¥–∫–∏."""
    print(f"\n[–®–∞–≥ {step}] {message}")
    time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

# –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
print("="*60)
print("–û–¢–õ–ê–î–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö API LM STUDIO".center(60))
print("="*60)

# –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
print_step(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞")
try:
    response = requests.get(f"{base_url}/models")
    if response.status_code == 200:
        print("‚úì –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        models = response.json()
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for model in models.get("data", []):
            print(f"  - {model['id']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –Ω—É–∂–Ω–∞—è –º–æ–¥–µ–ª—å
        available_models = [model["id"] for model in models.get("data", [])]
        if model_name in available_models:
            print(f"‚úì –ú–æ–¥–µ–ª—å {model_name} –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            print(f"‚úó –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            print(f"  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            sys.exit(1)
    else:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"  –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        sys.exit(1)
except Exception as e:
    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")
    sys.exit(1)

# –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
print_step(2, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
try:
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    
    data = {
        "model": model_name,
        "messages": [
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫."},
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
        ],
        "temperature": 0.7,
        "max_tokens": 100
    }
    
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    response = requests.post(
        f"{base_url}/chat/completions", 
        headers=headers,
        json=data
    )
    
    if response.status_code == 200:
        result = response.json()
        print("‚úì –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        print("\n–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
        print("-" * 40)
        print(result["choices"][0]["message"]["content"])
        print("-" * 40)
    else:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"  –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        sys.exit(1)
except Exception as e:
    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    sys.exit(1)

# –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
print_step(3, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
try:
    data = {
        "model": model_name,
        "messages": [
            {"role": "system", "content": "–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º."},
            {"role": "user", "content": "–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞."}
        ],
        "temperature": 0.7,
        "max_tokens": 500
    }
    
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    response = requests.post(
        f"{base_url}/chat/completions", 
        headers=headers,
        json=data
    )
    
    if response.status_code == 200:
        result = response.json()
        print("‚úì –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        print("\n–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
        print("-" * 40)
        print(result["choices"][0]["message"]["content"])
        print("-" * 40)
        
        print("\n‚úì –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("API LM Studio —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç simple_run.py –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.")
    else:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"  –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        sys.exit(1)
except Exception as e:
    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    sys.exit(1)


üìÑ example_task.py
from crewai import Agent, Task, Crew
from dotenv import load_dotenv
from tools import FileTool, TerminalTool, WebSearchTool, PDFReaderTool, GitTool, SQLiteTool, HTMLScraperTool
import os

load_dotenv()

developer = Agent(
    role="Full-Stack Developer",
    goal="–°–æ–∑–¥–∞—Ç—å Telegram-–±–æ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫",
    backstory="–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏.",
    tools=[
        FileTool(), TerminalTool(), WebSearchTool(),
        SQLiteTool(), HTMLScraperTool()
    ],
    verbose=True
)

task = Task(
    description="""
    –°–æ–∑–¥–∞–π Telegram-–±–æ—Ç–∞ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot.
    –ë–æ—Ç –¥–æ–ª–∂–µ–Ω:
    1. –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
    2. –ü–∞—Ä—Å–∏—Ç—å HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    3. –ü–æ–∑–≤–æ–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    4. –ò–º–µ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
    
    –°–æ–∑–¥–∞–π –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã, –≤–∫–ª—é—á–∞—è main.py –∏ schema.sql.
    """,
    expected_output="–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ main.py –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
    agent=developer
)

crew = Crew(
    agents=[developer],
    tasks=[task]
)

if __name__ == "__main__":
    result = crew.kickoff()
    print("\n\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ===")
    print(result)


üìÑ main.py
import os
import sys
import subprocess
import importlib
import pkg_resources
import json

class ModelManager:
    def __init__(self):
        self.models_config = {
            "openai": {
                "name": "OpenAI API",
                "env_vars": {
                    "OPENAI_API_KEY": "your-openai-api-key"
                },
                "models": ["gpt-3.5-turbo", "gpt-4", "gpt-4-turbo"]
            },
            "lm-studio-local": {
                "name": "LM Studio (localhost)",
                "env_vars": {
                    "OPENAI_API_KEY": "lm-studio",
                    "OPENAI_API_BASE": "http://localhost:1234/v1"
                },
                "models": ["local-model"]
            },
            "lm-studio-remote": {
                "name": "LM Studio (remote)",
                "env_vars": {
                    "OPENAI_API_KEY": "lm-studio",
                    "OPENAI_API_BASE": "http://26.224.68.101:1234/v1"
                },
                "models": ["remote-model"]
            },
            "ollama": {
                "name": "Ollama (–ª–æ–∫–∞–ª—å–Ω—ã–π)",
                "env_vars": {
                    "OPENAI_API_KEY": "ollama",
                    "OPENAI_API_BASE": "http://localhost:11434/v1"
                },
                "models": ["llama3", "mistral", "mixtral", "gemma"]
            },
            "anthropic": {
                "name": "Anthropic API",
                "env_vars": {
                    "ANTHROPIC_API_KEY": "your-anthropic-api-key"
                },
                "models": ["claude-3-opus", "claude-3-sonnet", "claude-3-haiku"]
            },
            "together": {
                "name": "Together AI",
                "env_vars": {
                    "TOGETHER_API_KEY": "your-together-api-key"
                },
                "models": ["mistralai/Mixtral-8x7B", "meta-llama/Llama-3-70b"]
            }
        }
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.config_file = "llm_config.json"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å LM Studio –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.current_provider = "lm-studio-remote"
        self.current_model = "remote-model"
        self.load_config()
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM."""
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
                    self.current_provider = config.get("provider", "lm-studio")
                    self.current_model = config.get("model", "local-model")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM."""
        try:
            with open(self.config_file, 'w') as f:
                json.dump({
                    "provider": self.current_provider,
                    "model": self.current_model
                }, f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
    
    def update_env_file(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
        provider_config = self.models_config.get(self.current_provider, {})
        env_vars = provider_config.get("env_vars", {})
        
        # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ .env —Ñ–∞–π–ª–∞
        env_content = {}
        if os.path.exists('.env'):
            with open('.env', 'r', encoding='utf-8') as f:
                for line in f:
                    if '=' in line:
                        key, value = line.strip().split('=', 1)
                        env_content[key] = value
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        env_content.update(env_vars)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞
        with open('.env', 'w', encoding='utf-8') as f:
            for key, value in env_content.items():
                f.write(f"{key}={value}\n")
        
        print(f"–§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_config.get('name')}.")
    
    def select_provider(self):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ LLM."""
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã LLM:")
        providers = list(self.models_config.keys())
        
        for i, provider in enumerate(providers):
            config = self.models_config[provider]
            print(f"{i+1}. {config['name']}")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–Ω–æ–º–µ—Ä): "))
            if 1 <= choice <= len(providers):
                self.current_provider = providers[choice-1]
                print(f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.models_config[self.current_provider]['name']}")
                self.select_model()
                self.update_env_file()
                self.save_config()
                return True
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
                return False
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return False
    
    def select_model(self):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
        provider_config = self.models_config.get(self.current_provider, {})
        models = provider_config.get("models", [])
        
        if not models:
            print("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
            return False
        
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for i, model in enumerate(models):
            print(f"{i+1}. {model}")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (–Ω–æ–º–µ—Ä): "))
            if 1 <= choice <= len(models):
                self.current_model = models[choice-1]
                print(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {self.current_model}")
                return True
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
                return False
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return False

class DependencyManager:
    def __init__(self):
        self.required_packages = [
            "crewai", "langchain", "openai", "python-dotenv", "pypdf2",
            "duckduckgo-search", "sqlalchemy", "streamlit", "gitpython",
            "playwright", "beautifulsoup4", "requests", "pandas",
            "matplotlib", "pillow", "anthropic", "together"
        ]
    
    def check_and_install_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ."""
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        missing_packages = []
        
        installed_packages = {pkg.key for pkg in pkg_resources.working_set}
        
        for package in self.required_packages:
            package_name = package.split('==')[0].lower()
            if package_name not in installed_packages:
                missing_packages.append(package)
        
        if missing_packages:
            print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
            print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤...")
            
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install"] + missing_packages)
                print("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞–∫–µ—Ç–æ–≤: {str(e)}")
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç—ã –≤—Ä—É—á–Ω—É—é: pip install -r requirements.txt")
                return False
        else:
            print("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        
        return True

    def check_env_file(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."""
        if not os.path.exists('.env'):
            print("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            with open('.env', 'w', encoding='utf-8') as f:
                f.write("OPENAI_API_KEY=lm-studio\n")
                f.write("OPENAI_API_BASE=http://localhost:1234/v1\n")
                f.write("SERPER_API_KEY=your-serper-key\n")
            print("–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")

from crewai_tools import BaseTool
import subprocess
import os
import requests
import sqlite3
from bs4 import BeautifulSoup
from PyPDF2 import PdfReader
from duckduckgo_search import DDGS
import git
import json
import time
from PIL import Image
from io import BytesIO
import pandas as pd
import matplotlib.pyplot as plt
import csv

class FileTool(BaseTool):
    name = "FileTool"
    description = "–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º."

    def _run(self, content: str, filename: str = "main.py"):
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        return f"–§–∞–π–ª {filename} —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω."

class TerminalTool(BaseTool):
    name = "TerminalTool"
    description = "–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –≤—ã–≤–æ–¥."

    def _run(self, command: str):
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            return result.stdout or result.stderr
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"

class WebSearchTool(BaseTool):
    name = "WebSearch"
    description = "–ò—â–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é DuckDuckGo."

    def _run(self, query: str):
        with DDGS() as ddgs:
            results = [r for r in ddgs.text(query, max_results=3)]
            return "\n".join([r['body'] for r in results])

class PDFReaderTool(BaseTool):
    name = "PDFReader"
    description = "–ß–∏—Ç–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç PDF-—Ñ–∞–π–ª."

    def _run(self, path: str):
        reader = PdfReader(path)
        text = "\n".join([page.extract_text() for page in reader.pages if page.extract_text()])
        return text[:3000]

class GitTool(BaseTool):
    name = "GitTool"
    description = "–í—ã–ø–æ–ª–Ω—è–µ—Ç git –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ."

    def _run(self, action: str):
        try:
            repo = git.Repo('.')
            if action == "commit":
                repo.git.add(A=True)
                repo.index.commit("auto-commit")
                return "–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã."
            elif action == "push":
                repo.git.push()
                return "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."
            else:
                return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ {action}"
        except Exception as e:
            return str(e)

class SQLiteTool(BaseTool):
    name = "SQLiteTool"
    description = "–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    def _run(self, query: str, db_name="local.db"):
        conn = sqlite3.connect(db_name)
        cur = conn.cursor()
        try:
            cur.execute(query)
            rows = cur.fetchall()
            conn.commit()
            return str(rows)
        except Exception as e:
            return str(e)
        finally:
            conn.close()

class HTMLScraperTool(BaseTool):
    name = "HTMLScraper"
    description = "–°–∫–∞—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ URL –∏ –ø–∞—Ä—Å–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."

    def _run(self, url: str):
        try:
            response = requests.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')
            return soup.get_text()[:3000]
        except Exception as e:
            return str(e)

class JSONTool(BaseTool):
    name = "JSONTool"
    description = "–†–∞–±–æ—Ç–∞–µ—Ç —Å JSON –¥–∞–Ω–Ω—ã–º–∏ - —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ."

    def _run(self, action: str, data=None, filename=None):
        if action == "read" and filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {str(e)}"
        elif action == "write" and data and filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                return f"JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ {filename}"
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON: {str(e)}"
        else:
            return "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è JSONTool"

class APITool(BaseTool):
    name = "APITool"
    description = "–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ API."

    def _run(self, url: str, method="GET", headers=None, data=None, params=None):
        try:
            if method.upper() == "GET":
                response = requests.get(url, headers=headers, params=params)
            elif method.upper() == "POST":
                response = requests.post(url, headers=headers, json=data, params=params)
            elif method.upper() == "PUT":
                response = requests.put(url, headers=headers, json=data, params=params)
            elif method.upper() == "DELETE":
                response = requests.delete(url, headers=headers, params=params)
            else:
                return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}"
            
            return {
                "status_code": response.status_code,
                "headers": dict(response.headers),
                "content": response.text[:3000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
            }
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

class DataAnalysisTool(BaseTool):
    name = "DataAnalysisTool"
    description = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV/Excel —Ñ–∞–π–ª–æ–≤."

    def _run(self, filename: str, action="summary"):
        try:
            if filename.endswith('.csv'):
                df = pd.read_csv(filename)
            elif filename.endswith(('.xlsx', '.xls')):
                df = pd.read_excel(filename)
            else:
                return "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSV –∏–ª–∏ Excel."
            
            if action == "summary":
                return {
                    "shape": df.shape,
                    "columns": list(df.columns),
                    "dtypes": str(df.dtypes),
                    "head": df.head(5).to_dict(),
                    "describe": df.describe().to_dict()
                }
            elif action == "plot" and len(df.columns) >= 2:
                plt.figure(figsize=(10, 6))
                plt.scatter(df[df.columns[0]], df[df.columns[1]])
                plt.title(f"{df.columns[0]} vs {df.columns[1]}")
                plt.xlabel(df.columns[0])
                plt.ylabel(df.columns[1])
                plot_file = "data_plot.png"
                plt.savefig(plot_file)
                plt.close()
                return f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {plot_file}"
            else:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

class ImageTool(BaseTool):
    name = "ImageTool"
    description = "–†–∞–±–æ—Ç–∞–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, –±–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞."

    def _run(self, action: str, url=None, path=None, width=None, height=None):
        try:
            if action == "download" and url:
                response = requests.get(url)
                img = Image.open(BytesIO(response.content))
                save_path = path or f"image_{int(time.time())}.jpg"
                img.save(save_path)
                return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {save_path}"
            
            elif action == "resize" and path:
                img = Image.open(path)
                if width and height:
                    resized = img.resize((width, height))
                    save_path = f"resized_{os.path.basename(path)}"
                    resized.save(save_path)
                    return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {save_path}"
                else:
                    return "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —É–∫–∞–∂–∏—Ç–µ width –∏ height"
            else:
                return "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ImageTool"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"

class CSVTool(BaseTool):
    name = "CSVTool"
    description = "–†–∞–±–æ—Ç–∞–µ—Ç —Å CSV —Ñ–∞–π–ª–∞–º–∏ - —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å, –æ–±—Ä–∞–±–æ—Ç–∫–∞."

    def _run(self, action: str, filename=None, data=None):
        try:
            if action == "read" and filename:
                rows = []
                with open(filename, 'r', newline='', encoding='utf-8') as csvfile:
                    reader = csv.DictReader(csvfile)
                    for row in reader:
                        rows.append(dict(row))
                return rows
            
            elif action == "write" and filename and data:
                if not data or not isinstance(data, list) or not isinstance(data[0], dict):
                    return "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π"
                
                fieldnames = data[0].keys()
                with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    writer.writeheader()
                    writer.writerows(data)
                return f"CSV —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ {filename}"
            
            else:
                return "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è CSVTool"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å CSV: {str(e)}"

from crewai import Agent, Task, Crew
from dotenv import load_dotenv
import os

class AIAgent:
    def __init__(self, model_manager):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π
        self.model_manager = model_manager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.tools = [
            FileTool(), TerminalTool(), WebSearchTool(),
            PDFReaderTool(), GitTool(), SQLiteTool(), HTMLScraperTool(),
            JSONTool(), APITool(), DataAnalysisTool(), ImageTool(), CSVTool()
        ]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        self.create_agent()
    
    def create_agent(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª–∏."""
        provider = self.model_manager.current_provider
        model = self.model_manager.current_model
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        if provider == "openai":
            self.agent = Agent(
                role="Full-Stack Autonomous Agent",
                goal="–í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                backstory="–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º.",
                tools=self.tools,
                verbose=True,
                llm=model
            )
        elif provider == "anthropic":
            from langchain.llms import Anthropic
            llm = Anthropic(model=model)
            self.agent = Agent(
                role="Full-Stack Autonomous Agent",
                goal="–í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                backstory="–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º.",
                tools=self.tools,
                verbose=True,
                llm=llm
            )
        elif provider in ["lm-studio-local", "lm-studio-remote", "ollama"]:
            from langchain.llms import OpenAI
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            base_url = os.getenv("OPENAI_API_BASE")
            api_key = os.getenv("OPENAI_API_KEY")
            
            model_name = "local-model"
            if provider == "ollama":
                model_name = model
            elif provider == "lm-studio-remote":
                model_name = "remote-model"
                
            llm = OpenAI(
                base_url=base_url,
                api_key=api_key,
                model_name=model_name
            )
            
            self.agent = Agent(
                role="Full-Stack Autonomous Agent",
                goal="–í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                backstory="–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º.",
                tools=self.tools,
                verbose=True,
                llm=llm
            )
        elif provider == "together":
            from langchain.llms import Together
            llm = Together(model=model)
            self.agent = Agent(
                role="Full-Stack Autonomous Agent",
                goal="–í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                backstory="–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º.",
                tools=self.tools,
                verbose=True,
                llm=llm
            )
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.agent = Agent(
                role="Full-Stack Autonomous Agent",
                goal="–í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                backstory="–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º.",
                tools=self.tools,
                verbose=True
            )
    
    def create_task(self, description, expected_output="–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –∞–≥–µ–Ω—Ç–∞."""
        return Task(
            description=description,
            expected_output=expected_output,
            agent=self.agent
        )
    
    def run_task(self, task_description):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
        task = self.create_task(task_description)
        crew = Crew(
            agents=[self.agent],
            tasks=[task]
        )
        
        result = crew.kickoff()
        return result

def display_menu():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏."""
    print("\n" + "="*50)
    print("–ê–í–¢–û–ù–û–ú–ù–´–ô AI-–ê–ì–ï–ù–¢".center(50))
    print("="*50)
    print("\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
    print("1. –í—ã–±—Ä–∞—Ç—å LLM –º–æ–¥–µ–ª—å")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É")
    print("0. –í—ã—Ö–æ–¥")
    print("="*50)

def display_tasks_menu():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–∞–¥–∞—á."""
    print("\n" + "="*50)
    print("–í–´–ë–û–† –ó–ê–î–ê–ß–ò".center(50))
    print("="*50)
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:")
    print("1. –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ Python —Å –±–∞–∑–æ–π SQLite")
    print("2. –°–æ–∑–¥–∞—Ç—å Telegram-–±–æ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫")
    print("3. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞")
    print("4. –°–≤–æ—è –∑–∞–¥–∞—á–∞ (–≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ)")
    print("0. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    print("="*50)

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    dependency_manager = DependencyManager()
    if not dependency_manager.check_and_install_dependencies():
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –í—ã—Ö–æ–¥...")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    model_manager = ModelManager()
    model_manager.current_provider = "lm-studio-remote"
    model_manager.current_model = "remote-model"
    model_manager.save_config()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model_manager.update_env_file()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
    agent = AIAgent(model_manager)
    
    # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∑–∞–¥–∞—á–∏
    print(f"\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {model_manager.models_config[model_manager.current_provider]['name']} ({model_manager.current_model})")
    print(f"URL: {model_manager.models_config[model_manager.current_provider]['env_vars']['OPENAI_API_BASE']}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –∑–∞–¥–∞—á–∏
    while True:
        display_tasks_menu()
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ")
        
        if choice == "0":
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            break
        
        elif choice == "1":
            task_description = """
            –°–æ–∑–¥–∞–π –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ Python —Å –±–∞–∑–æ–π SQLite –∏ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
            –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —É–º–µ—Ç—å:
            1. –î–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, email)
            2. –£–¥–∞–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
            3. –ò—Å–∫–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –∏–º–µ–Ω–∏
            4. –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            5. –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ SQLite –±–∞–∑—É
            
            –°–æ–∑–¥–∞–π —Ñ–∞–π–ª address_book.py —Å –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã.
            """
                
                elif task_choice == "1":
                    task_description = """
                    –°–æ–∑–¥–∞–π –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ Python —Å –±–∞–∑–æ–π SQLite –∏ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
                    –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —É–º–µ—Ç—å:
                    1. –î–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, email)
                    2. –£–¥–∞–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
                    3. –ò—Å–∫–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –∏–º–µ–Ω–∏
                    4. –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
                    5. –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ SQLite –±–∞–∑—É
                    
                    –°–æ–∑–¥–∞–π —Ñ–∞–π–ª address_book.py —Å –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã.
                    """
                
                elif task_choice == "2":
                    task_description = """
                    –°–æ–∑–¥–∞–π Telegram-–±–æ—Ç–∞ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot.
                    –ë–æ—Ç –¥–æ–ª–∂–µ–Ω:
                    1. –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
                    2. –ü–∞—Ä—Å–∏—Ç—å HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    3. –ü–æ–∑–≤–æ–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                    4. –ò–º–µ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
                    
                    –°–æ–∑–¥–∞–π –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã, –≤–∫–ª—é—á–∞—è telegram_bot.py –∏ schema.sql.
                    """
                
                elif task_choice == "3":
                    task_description = """
                    –í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
                    
                    1. –°–æ–∑–¥–∞–π CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ 5 –≥–æ—Ä–æ–¥–∞—Ö (–Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞—Å–µ–ª–µ–Ω–∏–µ, —Å—Ç—Ä–∞–Ω–∞)
                    2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç CSV —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç
                    3. –°–æ—Ö—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON —Ñ–∞–π–ª
                    4. –°–æ–∑–¥–∞–π SQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç—É–¥–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
                    5. –í—ã–ø–æ–ª–Ω–∏ SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º > 1 –º–ª–Ω
                    6. –°–∫–∞—á–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º
                    
                    –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏ –≤ –ø–∞–ø–∫—É 'results'.
                    """
                
                elif task_choice == "4":
                    print("\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏:")
                    task_description = input("> ")
                
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")
                    continue
                
                # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
                print(f"\n–ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –º–æ–¥–µ–ª—å—é: {model_manager.models_config[model_manager.current_provider]['name']} ({model_manager.current_model})...")
                try:
                    result = agent.run_task(task_description)
                    print("\n" + "="*50)
                    print("–†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø:".center(50))
                    print("="*50)
                    print(result)
                    print("="*50)
                    
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    break
                
                except Exception as e:
                    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
                    if model_manager.current_provider in ["lm-studio", "ollama"]:
                        print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä {model_manager.current_provider} –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É.")
                    else:
                        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π –≤ —Ñ–∞–π–ª–µ .env")
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    break
        
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            continue

if __name__ == "__main__":
    main()


üìÑ minimal_tts_test.py
print("=== –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç TTS ===\n")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç TTS
try:
    from TTS.api import TTS
    print("[OK] TTS —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TTS: {e}")
    print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install TTS==0.22.0")
    exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º PyTorch
try:
    import torch
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    print(f"[OK] PyTorch –¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
except Exception as e:
    print(f"[–û–®–ò–ë–ö–ê] –ü—Ä–æ–±–ª–µ–º–∞ —Å PyTorch: {e}")
    print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install torch torchaudio")
    exit(1)

# –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å
try:
    print("\n–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å...")
    tts = TTS(model_name="tts_models/ru/vits", progress_bar=True, gpu=('cuda' in device))
    print("[OK] –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    
    if hasattr(tts, 'speakers') and tts.speakers:
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {tts.speakers}")
    else:
        print("–ì–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
except Exception as e:
    print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: {e}")
    print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
    print("1. –£–¥–∞–ª–∏—Ç–µ –∫—ç—à TTS: rmdir /s /q %USERPROFILE%\\.tts")
    print("2. –£–¥–∞–ª–∏—Ç–µ –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TTS:")
    print("   pip uninstall -y TTS")
    print("   pip install TTS==0.22.0")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
    exit(1)

# –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å
try:
    print("\n–ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å...")
    output_file = "test_output.wav"
    tts.tts_to_file(
        text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–∞.",
        file_path=output_file,
        speaker=tts.speakers[0] if hasattr(tts, 'speakers') and tts.speakers else None
    )
    print(f"[OK] –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_file}")
    
    # –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
    try:
        import sounddevice as sd
        import soundfile as sf
        data, samplerate = sf.read(output_file)
        print("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ... (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
        sd.play(data, samplerate)
        sd.wait()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install sounddevice soundfile")
        
except Exception as e:
    print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å: {e}")
    exit(1)

print("\n–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


üìÑ project_content.txt

üìÅ C:\Users\user\Desktop\12

üìÑ .env
OPENAI_API_KEY=lm-studio
OPENAI_API_BASE=http://localhost:1234/v1
SERPER_API_KEY=your-serper-key


üìÑ advanced_example.py
from crewai import Agent, Task, Crew
from dotenv import load_dotenv
from tools import FileTool, TerminalTool, WebSearchTool, SQLiteTool, HTMLScraperTool
from advanced_tools import JSONTool, APITool, DataAnalysisTool, ImageTool, CSVTool
import os

load_dotenv()

data_scientist = Agent(
    role="Data Scientist",
    goal="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã",
    backstory="–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö, —É–º–µ—é—â–∏–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∏ API.",
    tools=[
        FileTool(), TerminalTool(), WebSearchTool(),
        SQLiteTool(), JSONTool(), APITool(), 
        DataAnalysisTool(), ImageTool(), CSVTool()
    ],
    verbose=True
)

task = Task(
    description="""
    –í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
    
    1. –°–æ–∑–¥–∞–π CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ 5 –≥–æ—Ä–æ–¥–∞—Ö (–Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞—Å–µ–ª–µ–Ω–∏–µ, —Å—Ç—Ä–∞–Ω–∞)
    2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç CSV —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç
    3. –°–æ—Ö—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON —Ñ–∞–π–ª
    4. –°–æ–∑–¥–∞–π SQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç—É–¥–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
    5. –í—ã–ø–æ–ª–Ω–∏ SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º > 1 –º–ª–Ω
    6. –°–∫–∞—á–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º
    
    –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏ –≤ –ø–∞–ø–∫—É 'results'.
    """,
    expected_output="–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.",
    agent=data_scientist
)

crew = Crew(
    agents=[data_scientist],
    tasks=[task]
)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists('results'):
        os.makedirs('results')
        
    result = crew.kickoff()
    print("\n\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ===")
    print(result)


üìÑ advanced_tools.py
from crewai_tools import BaseTool
import json
import os
import requests
import time
from PIL import Image
from io import BytesIO
import pandas as pd
import matplotlib.pyplot as plt
import csv

class JSONTool(BaseTool):
    name = "JSONTool"
    description = "–†–∞–±–æ—Ç–∞–µ—Ç —Å JSON –¥–∞–Ω–Ω—ã–º–∏ - —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ."

    def _run(self, action: str, data=None, filename=None):
        if action == "read" and filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {str(e)}"
        elif action == "write" and data and filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                return f"JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ {filename}"
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON: {str(e)}"
        else:
            return "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è JSONTool"

class APITool(BaseTool):
    name = "APITool"
    description = "–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ API."

    def _run(self, url: str, method="GET", headers=None, data=None, params=None):
        try:
            if method.upper() == "GET":
                response = requests.get(url, headers=headers, params=params)
            elif method.upper() == "POST":
                response = requests.post(url, headers=headers, json=data, params=params)
            elif method.upper() == "PUT":
                response = requests.put(url, headers=headers, json=data, params=params)
            elif method.upper() == "DELETE":
                response = requests.delete(url, headers=headers, params=params)
            else:
                return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}"
            
            return {
                "status_code": response.status_code,
                "headers": dict(response.headers),
                "content": response.text[:3000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
            }
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

class DataAnalysisTool(BaseTool):
    name = "DataAnalysisTool"
    description = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV/Excel —Ñ–∞–π–ª–æ–≤."

    def _run(self, filename: str, action="summary"):
        try:
            if filename.endswith('.csv'):
                df = pd.read_csv(filename)
            elif filename.endswith(('.xlsx', '.xls')):
                df = pd.read_excel(filename)
            else:
                return "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSV –∏–ª–∏ Excel."
            
            if action == "summary":
                return {
                    "shape": df.shape,
                    "columns": list(df.columns),
                    "dtypes": str(df.dtypes),
                    "head": df.head(5).to_dict(),
                    "describe": df.describe().to_dict()
                }
            elif action == "plot" and len(df.columns) >= 2:
                plt.figure(figsize=(10, 6))
                plt.scatter(df[df.columns[0]], df[df.columns[1]])
                plt.title(f"{df.columns[0]} vs {df.columns[1]}")
                plt.xlabel(df.columns[0])
                plt.ylabel(df.columns[1])
                plot_file = "data_plot.png"
                plt.savefig(plot_file)
                plt.close()
                return f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {plot_file}"
            else:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

class ImageTool(BaseTool):
    name = "ImageTool"
    description = "–†–∞–±–æ—Ç–∞–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, –±–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞."

    def _run(self, action: str, url=None, path=None, width=None, height=None):
        try:
            if action == "download" and url:
                response = requests.get(url)
                img = Image.open(BytesIO(response.content))
                save_path = path or f"image_{int(time.time())}.jpg"
                img.save(save_path)
                return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {save_path}"
            
            elif action == "resize" and path:
                img = Image.open(path)
                if width and height:
                    resized = img.resize((width, height))
                    save_path = f"resized_{os.path.basename(path)}"
                    resized.save(save_path)
                    return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {save_path}"
                else:
                    return "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —É–∫–∞–∂–∏—Ç–µ width –∏ height"
            else:
                return "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ImageTool"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"

class CSVTool(BaseTool):
    name = "CSVTool"
    description = "–†–∞–±–æ—Ç–∞–µ—Ç —Å CSV —Ñ–∞–π–ª–∞–º–∏ - —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å, –æ–±—Ä–∞–±–æ—Ç–∫–∞."

    def _run(self, action: str, filename=None, data=None):
        try:
            if action == "read" and filename:
                rows = []
                with open(filename, 'r', newline='', encoding='utf-8') as csvfile:
                    reader = csv.DictReader(csvfile)
                    for row in reader:
                        rows.append(dict(row))
                return rows
            
            elif action == "write" and filename and data:
                if not data or not isinstance(data, list) or not isinstance(data[0], dict):
                    return "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π"
                
                fieldnames = data[0].keys()
                with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    writer.writeheader()
                    writer.writerows(data)
                return f"CSV —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ {filename}"
            
            else:
                return "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è CSVTool"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å CSV: {str(e)}"


üìÑ agent.py
from crewai import Agent, Task, Crew
from dotenv import load_dotenv
from tools import FileTool, TerminalTool, WebSearchTool, PDFReaderTool, GitTool, SQLiteTool, HTMLScraperTool
import os

load_dotenv()

developer = Agent(
    role="Full-Stack Autonomous Coder",
    goal="–°–æ–∑–¥–∞–≤–∞—Ç—å, –∑–∞–ø—É—Å–∫–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å –ü–û, –≤—ã–ø–æ–ª–Ω—è—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–µ–π—Å—Ç–≤—É—è –∫–∞–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç",
    backstory="–¢—ã –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä, —Å–ø–æ—Å–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –∫–æ–¥–∏—Ç—å, —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–∞–º–∏, PDF, Git –∏ Web.",
    tools=[
        FileTool(), TerminalTool(), WebSearchTool(),
        PDFReaderTool(), GitTool(), SQLiteTool(), HTMLScraperTool()
    ],
    verbose=True
)

task = Task(
    description="–°–æ–∑–¥–∞–π –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ Python —Å –±–∞–∑–æ–π SQLite –∏ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.",
    expected_output="–ö–æ–¥ –≤ —Ñ–∞–π–ª–µ main.py + –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.",
    agent=developer
)

crew = Crew(
    agents=[developer],
    tasks=[task]
)

if __name__ == "__main__":
    crew.kickoff()


üìÑ Ar.py
import os

def scan_directory_to_txt(root_dir, output_file="project_content.txt"):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É + —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –≤ TXT.
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (>1 –ú–ë).
    """
    with open(output_file, "w", encoding="utf-8") as out_f:
        for root, dirs, files in os.walk(root_dir):
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
            out_f.write(f"\nüìÅ {os.path.abspath(root)}\n")
            
            for file in files:
                file_path = os.path.join(root, file)
                out_f.write(f"\nüìÑ {file}\n")
                
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –∏ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
                    if file.endswith((".png", ".jpg", ".exe", ".dll", ".zip", ".pth", ".bin")):
                        out_f.write("(–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—â–µ–Ω)\n")
                        continue
                    
                    file_size = os.path.getsize(file_path)
                    if file_size > 1_000_000:  # –ù–µ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã >1 MB
                        out_f.write(f"(—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç)\n")
                        continue
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                    with open(file_path, "r", encoding="utf-8") as in_f:
                        content = in_f.read()
                        out_f.write(f"{content}\n")
                except UnicodeDecodeError:
                    out_f.write("(–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞)\n")
                except Exception as e:
                    out_f.write(f"(–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {str(e)})\n")

if __name__ == "__main__":
    target_folder = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: ").strip()
    if not os.path.isdir(target_folder):
        print("–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    else:
        scan_directory_to_txt(target_folder)
        print(f"–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'project_content.txt'.")

üìÑ Ar.py.py
import os

def scan_directory_to_txt(root_dir, output_file="project_content.txt"):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É + —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –≤ TXT.
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (>1 –ú–ë).
    """
    with open(output_file, "w", encoding="utf-8") as out_f:
        for root, dirs, files in os.walk(root_dir):
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
            out_f.write(f"\nüìÅ {os.path.abspath(root)}\n")
            
            for file in files:
                file_path = os.path.join(root, file)
                out_f.write(f"\nüìÑ {file}\n")
                
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –∏ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
                    if file.endswith((".png", ".jpg", ".exe", ".dll", ".zip", ".pth", ".bin")):
                        out_f.write("(–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—â–µ–Ω)\n")
                        continue
                    
                    file_size = os.path.getsize(file_path)
                    if file_size > 1_000_000:  # –ù–µ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã >1 MB
                        out_f.write(f"(—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç)\n")
                        continue
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                    with open(file_path, "r", encoding="utf-8") as in_f:
                        content = in_f.read()
                        out_f.write(f"{content}\n")
                except UnicodeDecodeError:
                    out_f.write("(–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞)\n")
                except Exception as e:
                    out_f.write(f"(–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {str(e)})\n")

if __name__ == "__main__":
    target_folder = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: ").strip()
    if not os.path.isdir(target_folder):
        print("–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    else:
        scan_directory_to_txt(target_folder)
        print(f"–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'project_content.txt'.")

üìÑ bark_cli.py
import nemo.collections.tts as nemo_tts

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å Tacotron2
model = nemo_tts.models.Tacotron2Model.from_pretrained("tts_en_tacotron2")

# –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
text = "Hello, this is a test of NVIDIA NeMo TTS."

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–ª-—Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É
spectrogram = model.parse(text)

# –î–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –∞—É–¥–∏–æ –Ω—É–∂–Ω–∞ WaveGlow
waveglow = nemo_tts.models.WaveGlowModel.from_pretrained("tts_waveglow_88m")

audio = waveglow.convert_spectrogram_to_audio(spec=spectrogram)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
import soundfile as sf
sf.write("output.wav", audio.cpu().numpy(), samplerate=22050)


üìÑ c.py
import torch

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
language = 'ru'
model_id = 'v3_1_ru'  # –ú–æ–¥–µ–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
device = torch.device('cpu')  # –∏–ª–∏ 'cuda' –µ—Å–ª–∏ –µ—Å—Ç—å GPU

model, example_text = torch.hub.load(
    repo_or_dir='snakers4/silero-models',
    model='silero_tts',
    language=language,
    speaker=model_id
)
model.to(device)

# –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –≥–æ–ª–æ—Å–∞ –æ—Ç Silero TTS."
sample_rate = 48000  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
speaker = 'aidar'    # –í–∞—Ä–∏–∞–Ω—Ç—ã: 'aidar', 'baya', 'kseniya', 'xenia', 'random'

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
audio_path = 'output.wav'
model.save_wav(
    text=text,
    speaker=speaker,
    sample_rate=sample_rate,
    audio_path=audio_path
)

print(f"–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {audio_path}")

üìÑ check_tts.py
import os
import sys
from TTS.api import TTS

def main():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TTS...")
    print("–í–µ—Ä—Å–∏—è TTS:", TTS.__version__)
    
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        models = [
            "tts_models/ru/vits",
            "tts_models/en/ljspeech/tacotron2-DDC"
        ]
        
        for model in models:
            print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏: {model}")
            try:
                tts = TTS(model_name=model, progress_bar=False, gpu=False)
                print(f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model}")
                
                if hasattr(tts, 'speakers') and tts.speakers:
                    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {tts.speakers}")
                
                print("–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞...")
                tts.tts_to_file(text="–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç", file_path="test_output.wav")
                print("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test_output.wav")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model}: {str(e)}")
    
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –£–¥–∞–ª–∏—Ç–µ –∫—ç—à TTS: rm -r ~/.local/share/tts")
        print("2. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TTS: pip install --force-reinstall TTS")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")

if __name__ == "__main__":
    main()


üìÑ cmd_assistant.py
import os
import sys
import time
import requests
import json
import datetime
import colorama
from colorama import Fore, Back, Style
import shutil
from pathlib import Path
import os
import threading
import queue
import torch
import numpy as np
import sounddevice as sd
from TTS.api import TTS

# –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–≤–∏–∂–∫—É TTS
tts_queue = queue.Queue()

import os
import json
import requests
import tempfile
import pyttsx3
from pathlib import Path

class VoiceManager:
    def __init__(self):
        self.enabled = False
        self.current_voice = "–º—É–∂—Å–∫–æ–π"
        self.voices = {
            "–º—É–∂—Å–∫–æ–π": {
                "voice": "filipp",  # –ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å
                "emotion": "good"
            },
            "–∂–µ–Ω—Å–∫–∏–π": {
                "voice": "alena",   # –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
                "emotion": "good"
            }
        }
        self.iam_token = None
        self.folder_id = None
        self.engine = None
        self._initialize()
    
    def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –¥–≤–∏–∂–æ–∫"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Yandex Cloud
            config_path = os.path.join(os.path.expanduser('~'), '.yandex', 'config')
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    config = json.load(f)
                    self.iam_token = config.get('iam_token')
                    self.folder_id = config.get('folder_id')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            if not self.iam_token or not self.folder_id:
                print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Yandex Cloud. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å.")
                self._init_system_voice()
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Yandex SpeechKit
            response = requests.post(
                'https://iam.api.cloud.yandex.net/iam/v1/tokens',
                json={"yandexPassportOauthToken": self.iam_token}
            )
            
            if response.status_code != 200:
                print("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Yandex Cloud. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å.")
                self._init_system_voice()
                return False
                
            self.enabled = True
            print("–ì–æ–ª–æ—Å–æ–≤–æ–π –¥–≤–∏–∂–æ–∫ Yandex SpeechKit –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Yandex SpeechKit: {str(e)}")
            self._init_system_voice()
            return False
    
    def _init_system_voice(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"""
        try:
            self.engine = pyttsx3.init()
            voices = self.engine.getProperty('voices')
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞
            ru_voices = [v for v in voices if hasattr(v, 'languages') and any('ru' in lang.lower() for lang in getattr(v, 'languages', []))]
            
            if not ru_voices:
                ru_voices = voices
                
            self.voices["–º—É–∂—Å–∫–æ–π"]["id"] = next((v.id for v in ru_voices if 'male' in v.name.lower() or '–º—É–∂—Å–∫' in v.name.lower() or v == ru_voices[0]), ru_voices[0].id)
            self.voices["–∂–µ–Ω—Å–∫–∏–π"]["id"] = next((v.id for v in ru_voices if 'female' in v.name.lower() or '–∂–µ–Ω—Å–∫' in v.name.lower() or v == ru_voices[-1]), 
                                               ru_voices[-1].id if len(ru_voices) > 1 else ru_voices[0].id)
            
            self.enabled = True
            print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å")
            
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å: {str(e)}")
            self.enabled = False
    
    def _synthesize_speech(self, text, voice, emotion):
        """–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é Yandex SpeechKit"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º IAM —Ç–æ–∫–µ–Ω
            response = requests.post(
                'https://iam.api.cloud.yandex.net/iam/v1/tokens',
                json={"yandexPassportOauthToken": self.iam_token}
            )
            
            if response.status_code != 200:
                raise Exception("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                
            iam_token = response.json().get('iamToken')
            
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å
            headers = {
                'Authorization': f'Bearer {iam_token}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'text': text,
                'lang': 'ru-RU',
                'voice': voice,
                'emotion': emotion,
                'folderId': self.folder_id
            }
            
            response = requests.post(
                'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize',
                headers=headers,
                data=data
            )
            
            if response.status_code != 200:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {response.text}")
                
            return response.content
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ Yandex SpeechKit: {str(e)}")
            raise
    
    def speak(self, text):
        """–û–∑–≤—É—á–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
        if not self.enabled or not text.strip():
            return
            
        def _speak():
            try:
                if hasattr(self, 'engine') and self.engine:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å
                    voice = self.voices[self.current_voice]
                    self.engine.setProperty('voice', voice["id"])
                    self.engine.setProperty('rate', 150)
                    self.engine.setProperty('volume', 0.9)
                    self.engine.say(text)
                    self.engine.runAndWait()
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Yandex SpeechKit
                    voice = self.voices[self.current_voice]
                    audio_content = self._synthesize_speech(
                        text, 
                        voice=voice["voice"],
                        emotion=voice["emotion"]
                    )
                    
                    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
                    with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as f:
                        f.write(audio_content)
                        temp_file = f.name
                    
                    try:
                        import vlc
                        player = vlc.MediaPlayer(temp_file)
                        player.play()
                        
                        # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                        while player.is_playing():
                            import time
                            time.sleep(0.1)
                            
                    finally:
                        try:
                            os.unlink(temp_file)
                        except:
                            pass
                            
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ä–µ—á–∏: {str(e)}")
        
        threading.Thread(target=_speak, daemon=True).start()

    def change_voice(self, voice_name):
        """–ú–µ–Ω—è–µ—Ç –≥–æ–ª–æ—Å"""
        if voice_name not in self.voices:
            return "–¢–∞–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"
            
        if voice_name == self.current_voice:
            return f"–£–∂–µ –≤—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: {voice_name}"
            
        self.current_voice = voice_name
        return f"–ì–æ–ª–æ—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {voice_name}"

    def toggle(self, state=None):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –≥–æ–ª–æ—Å"""
        if state is not None:
            self.enabled = bool(state)
        else:
            self.enabled = not self.enabled
        status = "–≤–∫–ª—é—á–µ–Ω" if self.enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
        return f"–ì–æ–ª–æ—Å {status}"

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        try:
            if hasattr(self, 'engine') and self.engine:
                self.engine.stop()
            return "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {str(e)}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä VoiceManager
voice_manager = VoiceManager()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_BASE_URL = "http://26.224.68.101:1234/v1"
DEFAULT_MODEL = "saiga_mistral_7b_gguf"
DEFAULT_API_KEY = "lm-studio"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
colorama.init()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
BASE_URL = DEFAULT_BASE_URL
MODEL_NAME = DEFAULT_MODEL
API_KEY = DEFAULT_API_KEY

# –ö—ç—à –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
AVAILABLE_MODELS = []

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
MAX_TOKENS = 4000  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏
SYSTEM_PROMPT = """–¢—ã - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ Windows. 

–¢–í–û–ò –ü–†–ê–í–ò–õ–ê:
1. –û—Ç–≤–µ—á–∞–π –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ö–û–†–û–¢–ö–û, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞
2. –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –í–´–ü–û–õ–ù–Ø–ô –∏—Ö —Å–∞–º
3. –ù–ï –æ–±—ä—è—Å–Ω—è–π —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–π —á—Ç–æ –ø—Ä–æ—Å—è—Ç
4. –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ - –≥–æ–≤–æ—Ä–∏ –æ–± —ç—Ç–æ–º
5. –ü—Ä–∏ –æ—à–∏–±–∫–µ - –∫—Ä–∞—Ç–∫–æ —Å–æ–æ–±—â–∏ —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

–ü—Ä–∏–º–µ—Ä—ã:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt
–¢—ã: ‚úì –§–∞–π–ª —Å–æ–∑–¥–∞–Ω

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã
–¢—ã: file1.txt
file2.txt

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø—Ä–∏–≤–µ—Ç
–¢—ã: –ü—Ä–∏–≤–µ—Ç, —è –≥–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –∫–∞–∫ –¥–µ–ª–∞?
–¢—ã: –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É test
–¢—ã: ‚úì –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞

–ü–æ–º–Ω–∏: –ú–ò–ù–ò–ú–£–ú –°–õ–û–í, –ú–ê–ö–°–ò–ú–£–ú –î–ï–ô–°–¢–í–ò–ô!"""

def clear_screen():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª–∞."""
    os.system('cls' if os.name == 'nt' else 'clear')

def print_cmd_header():
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π CMD."""
    clear_screen()
    print(f"Microsoft Windows [Version 10.0.19045.3803]")
    print(f"(c) Microsoft Corporation. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.")
    print()

def get_current_directory():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ CMD."""
    return os.getcwd()

def print_prompt(directory):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    print(f"{directory}>", end=" ")

def execute_system_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        import subprocess
        result = subprocess.run(
            command,
            shell=True,
            text=True,
            capture_output=True,
            encoding='cp866'  # –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤ Windows
        )
        return result.stdout if result.stdout else "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"

def parse_file_creation_command(text):
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø—É—Ç—ë–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
    import re
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–µ–π –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    path_patterns = [
        (r'(?:–≤|–≤–æ|inside|in)\s+(?:–ø–∞–ø–∫[–µ–∏]|–∫–∞—Ç–∞–ª–æ–≥–µ|folder)?\s*([^\s\.]+)', 'in_folder'),
        (r'([^\s\\/]+(?:\\/[^\s\\/]+)*\.[a-zA-Z0-9]+)', 'full_path'),
    ]
    
    # –ò—â–µ–º —à–∞–±–ª–æ–Ω—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    content_templates = {
        '–∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏': 'tictactoe',
        '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä': 'calculator',
        '–∑–∞–º–µ—Ç–∫–∏': 'notes',
        '–∏–≥—Ä—É': 'game',
    }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å
    path = None
    content_type = None
    
    for pattern, ptype in path_patterns:
        match = re.search(pattern, text.lower())
        if match:
            if ptype == 'in_folder':
                folder = match.group(1).strip()
                filename = 'new_file.txt'
                path = f"{folder}/{filename}"
            else:
                path = match.group(1).strip()
            break
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    for keyword, template in content_templates.items():
        if keyword in text.lower():
            content_type = template
            break
    
    return path, content_type

def process_command(command, conversation_history):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    global BASE_URL, MODEL_NAME, API_KEY, voice_manager
    
    command = command.strip()
    response = ""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    if command.lower().startswith("–≥–æ–ª–æ—Å"):
        parts = command.split()
        if len(parts) > 1:
            if parts[1].lower() in ["–≤–∫–ª", "on"]:
                return voice_manager.toggle(True)
            elif parts[1].lower() in ["–≤—ã–∫–ª", "off"]:
                return voice_manager.toggle(False)
            elif parts[1].lower() in voice_manager.voices:
                return voice_manager.change_voice(parts[1].lower())
        return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –≥–æ–ª–æ—Å [–≤–∫–ª/–≤—ã–∫–ª/–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π]"
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    command = command.lower()  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if any(word in command for word in ['—Å–æ–∑–¥–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '—Å–¥–µ–ª–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '—Å–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç']):
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        requirements = analyze_requirements(command)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_structure = generate_app_structure(requirements)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
        results = []
        for path, content in app_structure.items():
            if path.endswith('/'):  # –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                result = create_file(path, None)
            else:
                result = create_file(path, content)
            results.append(result)
        
        return "\n".join(results)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
    if any(word in command.lower() for word in ['—Å–æ–∑–¥–∞–π', '—Å–æ–∑–¥–∞—Ç—å', '–Ω–∞–ø–∏—à–∏', '—Å–¥–µ–ª–∞–π']):
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø—É—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        path, _ = parse_file_creation_command(command)
        if path:
            return create_file(path)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏
    if '–≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏' in command.lower() or '–≤ –ø–∞–ø–∫–µ' in command.lower():
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ –∏ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
        parts = re.split(r'–≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏|–≤ –ø–∞–ø–∫–µ', command, flags=re.IGNORECASE)
        if len(parts) > 1:
            folder = parts[1].strip().split()[0]
            rest_command = ' '.join(parts[1].strip().split()[1:])
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not os.path.exists(folder):
                os.makedirs(folder, exist_ok=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏
            if any(cmd in rest_command.lower() for cmd in ['—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª', '—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª']):
                filename = rest_command.split('—Ñ–∞–π–ª')[-1].strip()
                return create_file(os.path.join(folder, filename))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    if command.lower() == '–º–µ–Ω—é':
        return show_interactive_menu()
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏
    if command.lower().startswith("—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª") or command.lower().startswith("—Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª"):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            parts = command.split()
            if len(parts) < 3:
                return "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞"
                
            filename = ' '.join(parts[2:]).strip('"\'')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .txt, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            if not os.path.splitext(filename)[1]:
                filename += ".txt"
                
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            os.makedirs(os.path.dirname(filename), exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    pass
                return f"‚úì –§–∞–π–ª {os.path.abspath(filename)} —Å–æ–∑–¥–∞–Ω"
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    elif command.lower().startswith("—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É") or command.lower().startswith("—Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É"):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            parts = command.split()
            if len(parts) < 3:
                return "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏"
                
            dirname = ' '.join(parts[2:]).strip('"\'')
            return create_folder(dirname)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    elif command.lower().startswith("–ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã") or command.lower().startswith("–ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã"):
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            result = f"–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {os.getcwd()}\n"
            result += "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
            items = os.listdir()
            for item in items:
                full_path = os.path.join(os.getcwd(), item)
                if os.path.isdir(full_path):
                    result += f"[–ü–∞–ø–∫–∞] {item}"
                else:
                    result += f"[–§–∞–π–ª]  {item}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if os.path.isfile(full_path):
                    size = os.path.getsize(full_path)
                    if size < 1024:
                        size_str = f"{size} –±–∞–π—Ç"
                    elif size < 1024*1024:
                        size_str = f"{size/1024:.1f} –ö–ë"
                    else:
                        size_str = f"{size/(1024*1024):.1f} –ú–ë"
                    result += f" ({size_str})"
                result += "\n"
                
            return result.strip()
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}"
    
    elif command.lower() == 'cls' or command.lower() == '–æ—á–∏—Å—Ç–∏—Ç—å':
        os.system('cls')
        return ""
        
    elif command.lower() == '–ø–æ–º–æ—â—å':
        show_full_help()
        return ""
        
    elif command.lower() == '—Å–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏':
        global MODEL_NAME
        MODEL_NAME = select_model()
        return f"‚úì –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {MODEL_NAME}"
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
    return None

def count_tokens(text):
    """–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ (1 —Ç–æ–∫–µ–Ω ~ 4 —Å–∏–º–≤–æ–ª–∞)"""
    return len(str(text)) // 4

def prepare_messages(history, user_message):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É"""
    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    total_tokens = count_tokens(SYSTEM_PROMPT) + count_tokens(user_message)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –ª–∏–º–∏—Ç–∞
    for msg in reversed(history):
        msg_tokens = count_tokens(msg["content"])
        if total_tokens + msg_tokens > MAX_TOKENS - 500:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            break
        messages.insert(1, msg)  # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ (–ø–æ—Å–ª–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
        total_tokens += msg_tokens
    
    messages.append({"role": "user", "content": user_message})
    return messages

def send_to_ai(message, conversation_history):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ AI –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    global BASE_URL, MODEL_NAME, API_KEY, voice_manager
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    command_response = process_command(message, conversation_history)
    if command_response is not None:
        if command_response:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã, –≤—ã–≤–æ–¥–∏–º –µ–≥–æ
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
            simulate_typing(command_response, delay=0.005)
            print("\n")
        return command_response
        
    try:
        print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...", end="\r")
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {API_KEY}"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        messages = prepare_messages(conversation_history, message)
        
        data = {
            "model": MODEL_NAME,
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 2000,
            "stream": False
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = requests.post(
            f"{BASE_URL}/chat/completions", 
            headers=headers,
            json=data,
            timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        )
        
        if response.status_code == 200:
            result = response.json()
            ai_response = result["choices"][0]["message"]["content"].strip()
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—á–∞—Ç–∏
            if ai_response:  # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                print("\n")  # –î–≤–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
                simulate_typing(ai_response, delay=0.005)
                print("\n")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
                
                # –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –≥–æ–ª–æ—Å –≤–∫–ª—é—á–µ–Ω
                if voice_manager.enabled and ai_response.strip():
                    voice_manager.speak(ai_response)
            
            return ai_response
        else:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}"
            if response.text:
                error_msg += f"\n–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}"
            print(f"\n{error_msg}\n")
            return error_msg
    except Exception as e:
        error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        print(f"\n{error_msg}\n")
        return error_msg

def simulate_typing(text, delay=0.01):
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–µ—á–∞—Ç–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–∞–∫ –≤ CMD."""
    for char in text:
        print(char, end='', flush=True)
        time.sleep(delay)
    print()

def get_available_models():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞."""
    global AVAILABLE_MODELS
    try:
        print("\n–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π...")
        response = requests.get(f"{BASE_URL}/models")
        if response.status_code == 200:
            models_data = response.json()
            AVAILABLE_MODELS = [model["id"] for model in models_data.get("data", [])]
            return AVAILABLE_MODELS
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")
    return []

def show_interactive_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    menu = [
        "1. –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª",
        "2. –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É",
        "3. –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã",
        "4. –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
        "5. –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å",
        "6. –í—ã—Ö–æ–¥"
    ]
    
    print("\n–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:")
    for item in menu:
        print(f"  {item}")
    
    while True:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç (1-6): ")
        if choice == '1':
            filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ")
            return f"—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª {filename}"
        elif choice == '2':
            dirname = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏: ")
            return f"—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É {dirname}"
        elif choice == '3':
            return "–ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã"
        elif choice == '4':
            return "–æ—á–∏—Å—Ç–∏—Ç—å"
        elif choice == '5':
            return "—Å–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏"
        elif choice == '6':
            return "–≤—ã—Ö–æ–¥"
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def analyze_requirements(prompt):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_type = "console"
    if any(word in prompt.lower() for word in ['–≤–µ–±', '—Å–∞–π—Ç', 'web']):
        app_type = "web"
    elif any(word in prompt.lower() for word in ['gui', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–æ–∫–Ω–æ']):
        app_type = "gui"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    components = []
    if any(word in prompt.lower() for word in ['–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–±–¥', 'sql']):
        components.append("database")
    if any(word in prompt.lower() for word in ['—Ñ–∞–π–ª', '–¥–æ–∫—É–º–µ–Ω—Ç']):
        components.append("file_operations")
    if any(word in prompt.lower() for word in ['api', '–∑–∞–ø—Ä–æ—Å']):
        components.append("api")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    language = "python"
    if any(word in prompt.lower() for word in ['javascript', 'js', 'node']):
        language = "javascript"
    elif any(word in prompt.lower() for word in ['java']):
        language = "java"
    
    return {
        "app_type": app_type,
        "components": components,
        "language": language,
        "name": "my_app"
    }

def generate_app_structure(requirements):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    structure = {}
    app_name = requirements["name"]
    
    # –ë–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ª—é–±–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    structure["README.md"] = f"# {app_name}\n\n–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    structure["requirements.txt"] = ""
    
    # –§–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if requirements["app_type"] == "web":
        structure["app.py"] = """from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def home():
    return '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!'

if __name__ == '__main__':
    app.run(debug=True)"""
        structure["requirements.txt"] += "flask==2.0.1\n"
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        structure["templates/"] = ""
        structure["static/"] = ""
        structure["static/css/"] = ""
        structure["static/js/"] = ""
        
    elif requirements["app_type"] == "gui":
        structure["main.py"] = """import tkinter as tk
from tkinter import ttk

class App:
    def __init__(self, root):
        self.root = root
        self.root.title(\"\"\"My App\"\"\")
        self.setup_ui()
    
    def setup_ui(self):
        # –°–æ–∑–¥–∞–µ–º –∏ —Ä–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.label = ttk.Label(self.root, text=\"–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\")
        self.label.pack(padx=20, pady=20)
        
        self.button = ttk.Button(self.root, text=\"–ù–∞–∂–º–∏ –º–µ–Ω—è\", command=self.on_click)
        self.button.pack(pady=10)
    
    def on_click(self):
        self.label.config(text=\"–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!\")

if __name__ == \"__main__\":
    root = tk.Tk()
    app = App(root)
    root.mainloop()"""
        structure["requirements.txt"] += "customtkinter==5.2.0\n"
    
    else:  # console app
        structure["main.py"] = """def main():
    print(\"–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\")

if __name__ == \"__main__\":
    main()"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    if "database" in requirements["components"]:
        structure["models/"] = ""
        structure["models/__init__.py"] = ""
        structure["models/database.py"] = """from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_URL = \"sqlite:///./app.db\"

engine = create_engine(DATABASE_URL, connect_args={\"check_same_thread\": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()"""
        structure["requirements.txt"] += "sqlalchemy==2.0.0\n"
    
    if "api" in requirements["components"]:
        structure["api/"] = ""
        structure["api/__init__.py"] = ""
        structure["api/routes.py"] = """from fastapi import APIRouter, Depends, HTTPException

router = APIRouter()

@router.get(\"/items/\")
async def read_items():
    return [{\"id\": 1, \"name\": \"Item 1\"}]"""
        structure["requirements.txt"] += "fastapi==0.104.0\nuvicorn==0.23.2\n"
    
    return structure

def create_file(filename, content=None):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        dirname = os.path.dirname(filename)
        if dirname and not os.path.exists(dirname):
            os.makedirs(dirname, exist_ok=True)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –µ—ë
        if filename.endswith('/'):
            os.makedirs(filename, exist_ok=True)
            return f"‚úì –ü–∞–ø–∫–∞ {os.path.abspath(filename)} —Å–æ–∑–¥–∞–Ω–∞"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
        with open(filename, 'w', encoding='utf-8') as f:
            if content is not None:
                f.write(content)
        
        return f"‚úì –§–∞–π–ª {os.path.abspath(filename)} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {filename}: {str(e)}"

def create_folder(dirname):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
    try:
        os.makedirs(dirname, exist_ok=True)
        return f"‚úì –ü–∞–ø–∫–∞ {os.path.abspath(dirname)} —Å–æ–∑–¥–∞–Ω–∞"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}"

def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º."""
    help_text = """
–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:

–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:
  —Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É [–∏–º—è]    - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É
  —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª [–∏–º—è]     - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
  –ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã          - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
  –º–µ–Ω—é                  - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é

–®–∞–±–ª–æ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:
  —Å–æ–∑–¥–∞–π –∏–≥—Ä—É –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
  —Å–æ–∑–¥–∞–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
  —Å–æ–∑–¥–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫

–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:
  —Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç
  —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª main.py –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç
  —Å–æ–∑–¥–∞–π –∏–≥—Ä—É –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ –≤ –ø–∞–ø–∫–µ –∏–≥—Ä—ã

–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  –æ—á–∏—Å—Ç–∏—Ç—å / cls        - –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω
  —Å–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏          - –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –ò–ò
  –ø–æ–º–æ—â—å                - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  –≤—ã—Ö–æ–¥ / exit          - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã

–°–û–í–ï–¢: –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å, –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!
"""
    print(help_text)

def select_model():
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö."""
    models = get_available_models()
    if not models:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return DEFAULT_MODEL
    
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for i, model in enumerate(models, 1):
        print(f"{i}. {model}")
    
    while True:
        try:
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): ").strip()
            if not choice:
                return DEFAULT_MODEL
            choice = int(choice) - 1
            if 0 <= choice < len(models):
                return models[choice]
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def save_conversation_history(history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–∞–π–ª"""
    try:
        with open('conversation_history.json', 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")

def load_conversation_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists('conversation_history.json'):
            with open('conversation_history.json', 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")
    return []

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print_cmd_header()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    conversation_history = load_conversation_history()
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    global MODEL_NAME
    MODEL_NAME = select_model()
    
    current_dir = get_current_directory()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\n" + "="*60)
    print("AI-–ê–°–°–ò–°–¢–ï–ù–¢ –ó–ê–ü–£–©–ï–ù".center(60))
    print("="*60)
    print(f"–ú–æ–¥–µ–ª—å: {MODEL_NAME}")
    print(f"–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {current_dir}")
    print("-"*60)
    show_help()
    print("-"*60)
    
    while True:
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        print_prompt(current_dir)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_input = input()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
        if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            save_conversation_history(conversation_history[-100:])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
            break
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            if user_input.strip():
                conversation_history.append({"role": "user", "content": user_input.strip()})
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI
            response = send_to_ai(user_input.strip(), conversation_history)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if response and response.strip():
                conversation_history.append({"role": "assistant", "content": response.strip()})
            
            # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            if len(conversation_history) % 5 == 0:
                save_conversation_history(conversation_history[-100:])
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞: {str(e)}"
            print(f"\n{error_msg}\n")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        colorama.deinit()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ colorama


üìÑ conversation_history.json
[
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç "
  },
  {
    "role": "assistant",
    "content": "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã."
  },
  {
    "role": "user",
    "content": "–∫–∞–∫ –¥–µ–ª–∞ ? "
  },
  {
    "role": "assistant",
    "content": "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ!"
  },
  {
    "role": "user",
    "content": "—Ä–∞—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ "
  },
  {
    "role": "assistant",
    "content": "–Ø —É—Ç–∏–ª–∏—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ Windows. –ú–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å, –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏, –∞ —Ç–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏.\n\n"
  },
  {
    "role": "user",
    "content": "–∞ –±–æ–ª—å—à–µ —Ç—ã –Ω–∏—á–µ–≥–æ –æ —Å–µ–±–µ –Ω–µ –∑–Ω–∞–µ—à—å ? "
  },
  {
    "role": "assistant",
    "content": "–ù–µ—Ç, –º–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–µ—â–µ–π! –ù–∞–ø—Ä–∏–º–µ—Ä, —è —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —á–∏—Å–ª–∞–º–∏, –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –Ω–∏–º–∏. –Ø —Ç–∞–∫–∂–µ –∑–Ω–∞—é –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∏ –æ–ø—Ü–∏—è—Ö –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –≤ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏."
  },
  {
    "role": "user",
    "content": "—Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É test "
  },
  {
    "role": "assistant",
    "content": "‚úì –ü–∞–ø–∫–∞ test —Å–æ–∑–¥–∞–Ω–∞"
  },
  {
    "role": "user",
    "content": "—Å–æ–∑–¥–∞–π –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –ø–∞–ø–∫–∏ —Ñ–∞–π–ª test "
  },
  {
    "role": "assistant",
    "content": "‚úì –§–∞–π–ª test —Å–æ–∑–¥–∞–Ω\n\n"
  },
  {
    "role": "user",
    "content": "—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test "
  },
  {
    "role": "assistant",
    "content": "test.txt"
  },
  {
    "role": "user",
    "content": "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt"
  },
  {
    "role": "assistant",
    "content": "‚úì –§–∞–π–ª test.txt —Å–æ–∑–¥–∞–Ω"
  },
  {
    "role": "user",
    "content": "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test"
  },
  {
    "role": "assistant",
    "content": "‚úì –§–∞–π–ª test.txt –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test —Å–æ–∑–¥–∞–Ω"
  },
  {
    "role": "user",
    "content": "–≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt "
  },
  {
    "role": "assistant",
    "content": "‚úì –§–∞–π–ª test.txt –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test —Å–æ–∑–¥–∞–Ω"
  },
  {
    "role": "user",
    "content": "–≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt "
  },
  {
    "role": "assistant",
    "content": "‚úì –§–∞–π–ª test.txt –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ test —Å–æ–∑–¥–∞–Ω"
  },
  {
    "role": "user",
    "content": "—Ç—ã —Ç—É—Ç ? "
  },
  {
    "role": "assistant",
    "content": "–î–∞, —è –∑–¥–µ—Å—å, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!"
  },
  {
    "role": "user",
    "content": "–∞ –º–æ–≥—É —è –¥–∞—Ç—å—Ç–µ–±–µ –∏–º—è ? "
  },
  {
    "role": "assistant",
    "content": "–ö–æ–Ω–µ—á–Ω–æ! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞—Ç—å?"
  },
  {
    "role": "user",
    "content": "–ù–µ–π—Ä–æ–Ω"
  },
  {
    "role": "assistant",
    "content": "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –∫–∞–∫ –∫ –ù–µ–π—Ä–æ–Ω—É.\n\n"
  },
  {
    "role": "user",
    "content": "–í—Å–º—ã—Å–ª–µ ? —è —Ç–µ–±–µ –∏–º—è –¥–∞—Ç—å —Ö–æ—Ç–µ–ª , —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –≤–æ–æ–±—â–µ –º–µ–Ω—è ? "
  },
  {
    "role": "assistant",
    "content": "–î–∞, —è –ø–æ–Ω–∏–º–∞—é –≤–∞—Å! –í—ã —Ö–æ—Ç–µ–ª–∏ –º–Ω–µ –¥–∞—Ç—å –∏–º—è, –∞ —Ç–∞–∫–∂–µ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –Ω–µ–≥–æ."
  },
  {
    "role": "user",
    "content": "–≤–æ—Ç —á—Ç–æ—Ç—ã —Å–µ–π—á–∞—Å —Å–∫–∞–∑–∞–ª ? –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∫–æ–≥–æ ? "
  },
  {
    "role": "assistant",
    "content": "–í–æ—Ç —á—Ç–æ —è —Å–µ–π—á–∞—Å —Å–∫–∞–∑–∞–ª - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –∫–∞–∫ –∫ –ù–µ–π—Ä–æ–Ω—É."
  },
  {
    "role": "user",
    "content": "–±–ª—è—è—è—è—è , —Å—É–∫–∞ –≤—Ä—É–±–∏—Å—å —É–∂–µ , —è —Ç–µ–±—è —Ç–∞–∫ –Ω–∞–∑–≤–∞—Ç—å —Ö–æ—Ç–µ–ª ! "
  },
  {
    "role": "assistant",
    "content": "–Ø –∏–∑–≤–∏–Ω—è—é—Å—å –∑–∞ –Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –∫–∞–∫ –∫ –ù–µ–π—Ä–æ–Ω—É."
  },
  {
    "role": "user",
    "content": "—Ç—ã –¥—É—Ä–∞–∫ —Å—É–∫–∞ ?)) "
  },
  {
    "role": "assistant",
    "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è. –ú—ã –∑–¥–µ—Å—å —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –Ø –±—É–¥—É —Ä–∞–¥ –≤–∞–º –ø–æ–º–æ—á—å –≤ –ª—é–±–æ–º –≤–æ–ø—Ä–æ—Å–µ!"
  },
  {
    "role": "user",
    "content": "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç ? "
  },
  {
    "role": "assistant",
    "content": "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–µ–π—Ä–æ–Ω."
  },
  {
    "role": "user",
    "content": "–∞ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –±–æ–ª—å—à–µ —é–º–æ—Ä–∞ ? "
  },
  {
    "role": "assistant",
    "content": "–ö–æ–Ω–µ—á–Ω–æ! –Ø —Ä–∞–¥, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å–ª—ã—à–∞—Ç—å –º–æ–∏ —à—É—Ç–∫–∏ –∏ —Å–º–µ—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–≤–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã!"
  },
  {
    "role": "user",
    "content": "–ø—Ä–æ–¥–æ–ª–∂–∏ —à—É—Ç–∫—É, –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–∞—Ä –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç , –µ—Å—Ç—å –ª–∏ –ø–∏–≤–æ? –±–∞—Ä–º–µ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç - –î–ê ! –î–∞–ª—å—à–µ..... \\"
  },
  {
    "role": "assistant",
    "content": "\"–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≥–∏, –æ–±—Ä–∞–¥–æ–≤–∞–≤—à–∏—Å—å, –∏ –≥–æ–≤–æ—Ä–∏—Ç: '–û–≥–æ, —É –Ω–∏—Ö –¥–∞–∂–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç!'\"\n\n"
  },
  {
    "role": "user",
    "content": "—Ç–µ–±–µ –Ω–µ –∫–∞–∂–µ—Ç—å—Å—è —á—Ç–æ –±—ã–ª–æ –±—ã –∑–∞–±–∞–≤–Ω–µ–µ –µ—Å–ª–∏ –±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏–ª —É –±–∞—Ä–º–µ–Ω–∞ : –ê –µ—Å–ª–∏ –Ω–µ—Ç ? "
  },
  {
    "role": "assistant",
    "content": "–î–∞, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–±–∞–≤–Ω–æ! –ï—Å–ª–∏ –±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Å–ø—Ä–æ—Å–∏–ª —É –±–∞—Ä–º–µ–Ω–∞: '–ê –µ—Å–ª–∏ –Ω–µ—Ç?', —Ç–æ –ø–æ–ª—É—á–∏–ª –±—ã –æ—Ç–≤–µ—Ç: '–ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ!'"
  },
  {
    "role": "user",
    "content": "–¥–∞ —É–∂ , —Å–æ–º–Ω–µ–≤–∞—é—Å—å —è —á—Ç–æ —Ç—ã –≤—ã–∫—É–ø–∞–µ—à—å —é–º–æ—Ä ) "
  },
  {
    "role": "assistant",
    "content": "–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –±—ã–ª —Å–∞–º—ã–π –ª—É—á—à–∏–π —é–º–æ—Ä! –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏. –ï—Å–ª–∏ –≤–∞–º —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º, —Ç–æ –ø—Ä–æ—Å–∏–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è.\n\n"
  },
  {
    "role": "user",
    "content": "—Å–ª—É—à–∞–π , –∞ –º–æ–≥—É –ª–∏ —è —Å–¥–µ–ª–∞—Ç—å —Ç–µ–±—è —É–º–Ω–µ–µ ? –∫–∞–∫–∏–º–∏ —Ç–æ –ø—Ä–æ–º—Ç–∞–º–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä ? –∫–∞–∫ —Ç—ã –¥—É–º–∞–µ—à—å ? "
  },
  {
    "role": "assistant",
    "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –º–Ω–µ –Ω–µ–ª—å–∑—è –ø–æ–≤—ã—à–∞—Ç—å —Å–≤–æ—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã. –Ø —É–∂–µ –∏–º–µ—é –≤—Å–µ –∑–Ω–∞–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Windows."
  },
  {
    "role": "user",
    "content": "–Ω—É –ø–æ–∫–∞ —á—Ç–æ –¥–∞–ª–µ–∫–æ –Ω–µ –≤—Å–µ ) "
  },
  {
    "role": "assistant",
    "content": "–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å! –ú—ã –º–æ–∂–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–∑–Ω–∞–≤–∞—Ç—å –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è –≤ –Ω–∞—à–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö –∏ —Ñ—É–Ω–∫—Ü–∏—è—Ö, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –µ—â–µ –±–æ–ª—å—à–µ. –Ø —Ä–∞–¥ –±—ã—Ç—å —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞!"
  },
  {
    "role": "user",
    "content": "–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—ã –ª–æ–∫–∞–ª—å–Ω–∞—è –∏—Å—Å–∫—É—Å—Ç–≤–µ–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –º–æ–µ–º –ø–∫ , —è –ø—ã—Ç–∞—Å—å —Ä–∞–≤—à–∏—Ä–∏—Ç—å –æ–±–ª–∞—Å—Ç—å —Ç–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ —Ç–æ –≤—Ä–æ–¥–µ –¥–∂–∞—Ä–≤–∏—Å–∞ –∏–∑ –∂–µ–ª–µ–∑–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ , –ø–æ–Ω–∏–º–∞–µ—à—å –æ —á–µ–º —è ? "
  },
  {
    "role": "assistant",
    "content": "–Ø –ø–æ–Ω–∏–º–∞—é. –í—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º."
  },
  {
    "role": "user",
    "content": "–¥–∞ , –≥–æ—Ä—è–∑–¥–æ –±–æ–ª–µ–µ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º "
  },
  {
    "role": "assistant",
    "content": "–ö–æ–Ω–µ—á–Ω–æ! –ú—ã –º–æ–∂–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–ª—É—á—à–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –µ—â–µ –±–æ–ª—å—à–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –∑–∞–ø—Ä–æ—Å–∞—Ö. –Ø —Ä–∞–¥ –±—ã—Ç—å —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–∞—Å!\n\n"
  },
  {
    "role": "user",
    "content": "–∞ —Ç—ã –º–æ–≥ –±—ã —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –º–µ–Ω—è –ø–∞–ø–∫—É —Å –∏–≥—Ä–æ–π –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏ ? "
  },
  {
    "role": "assistant",
    "content": "–ö–æ–Ω–µ—á–Ω–æ, —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤ —ç—Ç–æ–º. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É —Å –∏–≥—Ä–æ–π \"–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\", –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π:\n```bash\nmkdir TicTacToe\n```"
  },
  {
    "role": "user",
    "content": "–∞ —Å–∞–º —Ç—ã —Å–¥–µ–ª–∞—Ç—å –Ω–µ –º–æ–∂–µ—à—å ? "
  },
  {
    "role": "assistant",
    "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∫–∞–∫ —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ Windows, —è –Ω–µ –º–æ–≥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ \"–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\". –û–¥–Ω–∞–∫–æ, —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–∞–ø–∫–∏ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–≥—Ä—ã –≤ —ç—Ç—É –ø–∞–ø–∫—É.\n\n"
  },
  {
    "role": "user",
    "content": "–∞ –∏–≥—Ä—É —Å–æ–∑–¥–∞—Ç—å —Ç—ã –º–æ–∂–µ—à—å ? "
  },
  {
    "role": "assistant",
    "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–∞–∫ —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ Windows, —è –Ω–µ –º–æ–≥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–ª–∏ –∏–≥—Ä—ã. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–µ—Ä—Å–∏–π –∏–≥—Ä –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–º –∏—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ \"–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\" –Ω–∞ —Å–≤–æ–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ."
  },
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç "
  },
  {
    "role": "assistant",
    "content": "–ü—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "user",
    "content": "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ "
  },
  {
    "role": "assistant",
    "content": "–Ø - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥ –≤ Windows."
  },
  {
    "role": "user",
    "content": "–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ ? "
  },
  {
    "role": "assistant",
    "content": "–Ø - –º–æ–¥–µ–ª—å —è–∑—ã–∫–æ–≤–æ–π —Å–≤—è–∑–∏ \"–î–∞–ª—ë–∫\" –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ \"–Ø–Ω–¥–µ–∫—Å\". –ú–æ—è –∑–∞–¥–∞—á–∞ - –æ–±—É—á–∞—Ç—å –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã. –Ø –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ."
  },
  {
    "role": "user",
    "content": "–∞ —Ç—ã —Ä–∞–∑–≤–µ –Ω–µ –º–∏—Å—Ç—Ä–∞–ª –Ω–µ–º–æ ? "
  },
  {
    "role": "assistant",
    "content": "–ù–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ù–µ–π—Ä–æ–Ω. –Ø ‚Äî –º–æ–¥–µ–ª—å –æ—Ç Mistral AI."
  },
  {
    "role": "user",
    "content": "—Ç–∞–∫ –ª–∞–¥–Ω–æ , —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–æ–Ω–∏–º–∞—Ç—å –∫–∞–∫ —Ö–æ—Ä–æ—à–æ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã –∏ –≤–æ–æ—â–µ –≤ —Ü–µ–ª–æ–º –º–æ—é —Ä–µ—á—å ? "
  },
  {
    "role": "assistant",
    "content": "–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—Å."
  },
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "assistant",
    "content": "‚úì –ü—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "assistant",
    "content": "‚úì –ü—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "user",
    "content": "–≥–æ–ª–æ—Å —Å–∏—Å—Ç–µ–º–Ω—ã–π"
  },
  {
    "role": "assistant",
    "content": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –≥–æ–ª–æ—Å [–≤–∫–ª/–≤—ã–∫–ª/–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π]"
  },
  {
    "role": "user",
    "content": "–≥–æ–ª–æ—Å –º—É–∂—Å–∫–æ–π"
  },
  {
    "role": "assistant",
    "content": "–ì–æ–ª–æ—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –º—É–∂—Å–∫–æ–π (—Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å)"
  },
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "assistant",
    "content": "‚úì –ü—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "assistant",
    "content": "‚úì –ü—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "user",
    "content": "–ø—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "assistant",
    "content": "‚úì –ü—Ä–∏–≤–µ—Ç"
  },
  {
    "role": "user",
    "content": "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ"
  },
  {
    "role": "assistant",
    "content": "–Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥ –≤ Windows."
  },
  {
    "role": "user",
    "content": "–∞ –ø–æ–¥—Ä–æ–±–Ω–Ω–µ , —Ç—ã –≤–µ–¥—å –ª–æ–∫–∞–ª—å–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–∫–∞ , —Ç—ã –≤ –∫—É—Ä—Å–µ ?"
  },
  {
    "role": "assistant",
    "content": "–ù–µ—Ç."
  },
  {
    "role": "user",
    "content": "–Ω–µ –±—É–¥—å —Ç–∞–∫–∏–º –∫—Ä–∞—Ç–∫–∏–º , –æ—Ç–≤–µ—á–∞–π –±–æ–ª–µ–µ –æ—Ç–∫—Ä—ã—Ç–æ"
  },
  {
    "role": "assistant",
    "content": "OK. How can I assist you today?"
  }
]

üìÑ coqui_tts_test.py
import os
import torch
from TTS.api import TTS
import sounddevice as sd
import numpy as np
import soundfile as sf
import tempfile

def test_coqui_tts():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Coqui TTS...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫—É—é VITS –º–æ–¥–µ–ª—å
    model_name = "tts_models/ru/vits"
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        tts = TTS(model_name=model_name, progress_bar=False, gpu=torch.cuda.is_available())
        print(f"–ú–æ–¥–µ–ª—å {model_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏–∫–µ—Ä—ã
        speakers = ["aidar", "baya", "kseniya", "xenia", "eugene"]
        
        while True:
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
            for i, speaker in enumerate(speakers):
                print(f"{i+1}. {speaker}")
            print("0. –í—ã—Ö–æ–¥")
            
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å (–∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
                if choice == "0":
                    break
                    
                speaker_idx = int(choice) - 1
                if 0 <= speaker_idx < len(speakers):
                    speaker = speakers[speaker_idx]
                    text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: ").strip()
                    
                    if not text:
                        text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–∞."
                    
                    print(f"\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ —Å –≥–æ–ª–æ—Å–æ–º {speaker}...")
                    
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
                    with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as f:
                        temp_file = f.name
                    
                    try:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å
                        tts.tts_to_file(
                            text=text,
                            file_path=temp_file,
                            speaker=speaker
                        )
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
                        data, samplerate = sf.read(temp_file)
                        
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
                        max_volume = np.max(np.abs(data))
                        if max_volume > 0:
                            data = data * (0.9 / max_volume)
                        
                        print("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ... (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
                        sd.play(data, samplerate)
                        sd.wait()
                        
                    finally:
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        try:
                            os.unlink(temp_file)
                        except:
                            pass
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞")
                    
            except (ValueError, KeyboardInterrupt):
                print("\n–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é...")
                continue
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Coqui TTS: {str(e)}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞.")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: tts --model_name tts_models/ru/vits --list_speaker_idxs")

if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç Coqui TTS ===\n")
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CUDA:", "–î–æ—Å—Ç—É–ø–Ω–æ" if torch.cuda.is_available() else "–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
    test_coqui_tts()


üìÑ debug_api.py
import requests
import json
import time
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
base_url = "http://26.224.68.101:1234/v1"
model_name = "saiga_mistral_7b_gguf"
api_key = "lm-studio"  # –î–ª—è LM Studio —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ –Ω–µ –≤–∞–∂–Ω–æ

def print_step(step, message):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ –æ—Ç–ª–∞–¥–∫–∏."""
    print(f"\n[–®–∞–≥ {step}] {message}")
    time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

# –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
print("="*60)
print("–û–¢–õ–ê–î–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö API LM STUDIO".center(60))
print("="*60)

# –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
print_step(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞")
try:
    response = requests.get(f"{base_url}/models")
    if response.status_code == 200:
        print("‚úì –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        models = response.json()
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for model in models.get("data", []):
            print(f"  - {model['id']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –Ω—É–∂–Ω–∞—è –º–æ–¥–µ–ª—å
        available_models = [model["id"] for model in models.get("data", [])]
        if model_name in available_models:
            print(f"‚úì –ú–æ–¥–µ–ª—å {model_name} –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            print(f"‚úó –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            print(f"  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            sys.exit(1)
    else:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"  –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        sys.exit(1)
except Exception as e:
    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")
    sys.exit(1)

# –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
print_step(2, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
try:
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    
    data = {
        "model": model_name,
        "messages": [
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫."},
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
        ],
        "temperature": 0.7,
        "max_tokens": 100
    }
    
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    response = requests.post(
        f"{base_url}/chat/completions", 
        headers=headers,
        json=data
    )
    
    if response.status_code == 200:
        result = response.json()
        print("‚úì –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        print("\n–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
        print("-" * 40)
        print(result["choices"][0]["message"]["content"])
        print("-" * 40)
    else:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"  –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        sys.exit(1)
except Exception as e:
    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    sys.exit(1)

# –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
print_step(3, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
try:
    data = {
        "model": model_name,
        "messages": [
            {"role": "system", "content": "–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º."},
            {"role": "user", "content": "–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞."}
        ],
        "temperature": 0.7,
        "max_tokens": 500
    }
    
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    response = requests.post(
        f"{base_url}/chat/completions", 
        headers=headers,
        json=data
    )
    
    if response.status_code == 200:
        result = response.json()
        print("‚úì –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        print("\n–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
        print("-" * 40)
        print(result["choices"][0]["message"]["content"])
        print("-" * 40)
        
        print("\n‚úì –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("API LM Studio —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç simple_run.py –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.")
    else:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"  –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        sys.exit(1)
except Exception as e:
    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    sys.exit(1)


üìÑ example_task.py
from crewai import Agent, Task, Crew
from dotenv import load_dotenv
from tools import FileTool, TerminalTool, WebSearchTool, PDFReaderTool, GitTool, SQLiteTool, HTMLScraperTool
import os

load_dotenv()

developer = Agent(
    role="Full-Stack Developer",
    goal="–°–æ–∑–¥–∞—Ç—å Telegram-–±–æ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫",
    backstory="–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏.",
    tools=[
        FileTool(), TerminalTool(), WebSearchTool(),
        SQLiteTool(), HTMLScraperTool()
    ],
    verbose=True
)

task = Task(
    description="""
    –°–æ–∑–¥–∞–π Telegram-–±–æ—Ç–∞ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot.
    –ë–æ—Ç –¥–æ–ª–∂–µ–Ω:
    1. –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
    2. –ü–∞—Ä—Å–∏—Ç—å HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    3. –ü–æ–∑–≤–æ–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    4. –ò–º–µ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
    
    –°–æ–∑–¥–∞–π –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã, –≤–∫–ª—é—á–∞—è main.py –∏ schema.sql.
    """,
    expected_output="–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ main.py –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
    agent=developer
)

crew = Crew(
    agents=[developer],
    tasks=[task]
)

if __name__ == "__main__":
    result = crew.kickoff()
    print("\n\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ===")
    print(result)


üìÑ main.py
import os
import sys
import subprocess
import importlib
import pkg_resources
import json

class ModelManager:
    def __init__(self):
        self.models_config = {
            "openai": {
                "name": "OpenAI API",
                "env_vars": {
                    "OPENAI_API_KEY": "your-openai-api-key"
                },
                "models": ["gpt-3.5-turbo", "gpt-4", "gpt-4-turbo"]
            },
            "lm-studio-local": {
                "name": "LM Studio (localhost)",
                "env_vars": {
                    "OPENAI_API_KEY": "lm-studio",
                    "OPENAI_API_BASE": "http://localhost:1234/v1"
                },
                "models": ["local-model"]
            },
            "lm-studio-remote": {
                "name": "LM Studio (remote)",
                "env_vars": {
                    "OPENAI_API_KEY": "lm-studio",
                    "OPENAI_API_BASE": "http://26.224.68.101:1234/v1"
                },
                "models": ["remote-model"]
            },
            "ollama": {
                "name": "Ollama (–ª–æ–∫–∞–ª—å–Ω—ã–π)",
                "env_vars": {
                    "OPENAI_API_KEY": "ollama",
                    "OPENAI_API_BASE": "http://localhost:11434/v1"
                },
                "models": ["llama3", "mistral", "mixtral", "gemma"]
            },
            "anthropic": {
                "name": "Anthropic API",
                "env_vars": {
                    "ANTHROPIC_API_KEY": "your-anthropic-api-key"
                },
                "models": ["claude-3-opus", "claude-3-sonnet", "claude-3-haiku"]
            },
            "together": {
                "name": "Together AI",
                "env_vars": {
                    "TOGETHER_API_KEY": "your-together-api-key"
                },
                "models": ["mistralai/Mixtral-8x7B", "meta-llama/Llama-3-70b"]
            }
        }
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.config_file = "llm_config.json"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å LM Studio –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.current_provider = "lm-studio-remote"
        self.current_model = "remote-model"
        self.load_config()
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM."""
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
                    self.current_provider = config.get("provider", "lm-studio")
                    self.current_model = config.get("model", "local-model")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM."""
        try:
            with open(self.config_file, 'w') as f:
                json.dump({
                    "provider": self.current_provider,
                    "model": self.current_model
                }, f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
    
    def update_env_file(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
        provider_config = self.models_config.get(self.current_provider, {})
        env_vars = provider_config.get("env_vars", {})
        
        # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ .env —Ñ–∞–π–ª–∞
        env_content = {}
        if os.path.exists('.env'):
            with open('.env', 'r', encoding='utf-8') as f:
                for line in f:
                    if '=' in line:
                        key, value = line.strip().split('=', 1)
                        env_content[key] = value
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        env_content.update(env_vars)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞
        with open('.env', 'w', encoding='utf-8') as f:
            for key, value in env_content.items():
                f.write(f"{key}={value}\n")
        
        print(f"–§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_config.get('name')}.")
    
    def select_provider(self):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ LLM."""
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã LLM:")
        providers = list(self.models_config.keys())
        
        for i, provider in enumerate(providers):
            config = self.models_config[provider]
            print(f"{i+1}. {config['name']}")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–Ω–æ–º–µ—Ä): "))
            if 1 <= choice <= len(providers):
                self.current_provider = providers[choice-1]
                print(f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.models_config[self.current_provider]['name']}")
                self.select_model()
                self.update_env_file()
                self.save_config()
                return True
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
                return False
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return False
    
    def select_model(self):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
        provider_config = self.models_config.get(self.current_provider, {})
        models = provider_config.get("models", [])
        
        if not models:
            print("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
            return False
        
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for i, model in enumerate(models):
            print(f"{i+1}. {model}")
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (–Ω–æ–º–µ—Ä): "))
            if 1 <= choice <= len(models):
                self.current_model = models[choice-1]
                print(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {self.current_model}")
                return True
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
                return False
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return False

class DependencyManager:
    def __init__(self):
        self.required_packages = [
            "crewai", "langchain", "openai", "python-dotenv", "pypdf2",
            "duckduckgo-search", "sqlalchemy", "streamlit", "gitpython",
            "playwright", "beautifulsoup4", "requests", "pandas",
            "matplotlib", "pillow", "anthropic", "together"
        ]
    
    def check_and_install_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ."""
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        missing_packages = []
        
        installed_packages = {pkg.key for pkg in pkg_resources.working_set}
        
        for package in self.required_packages:
            package_name = package.split('==')[0].lower()
            if package_name not in installed_packages:
                missing_packages.append(package)
        
        if missing_packages:
            print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
            print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤...")
            
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install"] + missing_packages)
                print("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞–∫–µ—Ç–æ–≤: {str(e)}")
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç—ã –≤—Ä—É—á–Ω—É—é: pip install -r requirements.txt")
                return False
        else:
            print("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        
        return True

    def check_env_file(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."""
        if not os.path.exists('.env'):
            print("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            with open('.env', 'w', encoding='utf-8') as f:
                f.write("OPENAI_API_KEY=lm-studio\n")
                f.write("OPENAI_API_BASE=http://localhost:1234/v1\n")
                f.write("SERPER_API_KEY=your-serper-key\n")
            print("–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")

from crewai_tools import BaseTool
import subprocess
import os
import requests
import sqlite3
from bs4 import BeautifulSoup
from PyPDF2 import PdfReader
from duckduckgo_search import DDGS
import git
import json
import time
from PIL import Image
from io import BytesIO
import pandas as pd
import matplotlib.pyplot as plt
import csv

class FileTool(BaseTool):
    name = "FileTool"
    description = "–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º."

    def _run(self, content: str, filename: str = "main.py"):
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        return f"–§–∞–π–ª {filename} —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω."

class TerminalTool(BaseTool):
    name = "TerminalTool"
    description = "–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –≤—ã–≤–æ–¥."

    def _run(self, command: str):
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            return result.stdout or result.stderr
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"

class WebSearchTool(BaseTool):
    name = "WebSearch"
    description = "–ò—â–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é DuckDuckGo."

    def _run(self, query: str):
        with DDGS() as ddgs:
            results = [r for r in ddgs.text(query, max_results=3)]
            return "\n".join([r['body'] for r in results])

class PDFReaderTool(BaseTool):
    name = "PDFReader"
    description = "–ß–∏—Ç–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç PDF-—Ñ–∞–π–ª."

    def _run(self, path: str):
        reader = PdfReader(path)
        text = "\n".join([page.extract_text() for page in reader.pages if page.extract_text()])
        return text[:3000]

class GitTool(BaseTool):
    name = "GitTool"
    description = "–í—ã–ø–æ–ª–Ω—è–µ—Ç git –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ."

    def _run(self, action: str):
        try:
            repo = git.Repo('.')
            if action == "commit":
                repo.git.add(A=True)
                repo.index.commit("auto-commit")
                return "–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã."
            elif action == "push":
                repo.git.push()
                return "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."
            else:
                return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ {action}"
        except Exception as e:
            return str(e)

class SQLiteTool(BaseTool):
    name = "SQLiteTool"
    description = "–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    def _run(self, query: str, db_name="local.db"):
        conn = sqlite3.connect(db_name)
        cur = conn.cursor()
        try:
            cur.execute(query)
            rows = cur.fetchall()
            conn.commit()
            return str(rows)
        except Exception as e:
            return str(e)
        finally:
            conn.close()

class HTMLScraperTool(BaseTool):
    name = "HTMLScraper"
    description = "–°–∫–∞—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ URL –∏ –ø–∞—Ä—Å–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."

    def _run(self, url: str):
        try:
            response = requests.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')
            return soup.get_text()[:3000]
        except Exception as e:
            return str(e)

class JSONTool(BaseTool):
    name = "JSONTool"
    description = "–†–∞–±–æ—Ç–∞–µ—Ç —Å JSON –¥–∞–Ω–Ω—ã–º–∏ - —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ."

    def _run(self, action: str, data=None, filename=None):
        if action == "read" and filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {str(e)}"
        elif action == "write" and data and filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                return f"JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ {filename}"
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON: {str(e)}"
        else:
            return "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è JSONTool"

class APITool(BaseTool):
    name = "APITool"
    description = "–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ API."

    def _run(self, url: str, method="GET", headers=None, data=None, params=None):
        try:
            if method.upper() == "GET":
                response = requests.get(url, headers=headers, params=params)
            elif method.upper() == "POST":
                response = requests.post(url, headers=headers, json=data, params=params)
            elif method.upper() == "PUT":
                response = requests.put(url, headers=headers, json=data, params=params)
            elif method.upper() == "DELETE":
                response = requests.delete(url, headers=headers, params=params)
            else:
                return f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}"
            
            return {
                "status_code": response.status_code,
                "headers": dict(response.headers),
                "content": response.text[:3000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
            }
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

class DataAnalysisTool(BaseTool):
    name = "DataAnalysisTool"
    description = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV/Excel —Ñ–∞–π–ª–æ–≤."

    def _run(self, filename: str, action="summary"):
        try:
            if filename.endswith('.csv'):
                df = pd.read_csv(filename)
            elif filename.endswith(('.xlsx', '.xls')):
                df = pd.read_excel(filename)
            else:
                return "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSV –∏–ª–∏ Excel."
            
            if action == "summary":
                return {
                    "shape": df.shape,
                    "columns": list(df.columns),
                    "dtypes": str(df.dtypes),
                    "head": df.head(5).to_dict(),
                    "describe": df.describe().to_dict()
                }
            elif action == "plot" and len(df.columns) >= 2:
                plt.figure(figsize=(10, 6))
                plt.scatter(df[df.columns[0]], df[df.columns[1]])
                plt.title(f"{df.columns[0]} vs {df.columns[1]}")
                plt.xlabel(df.columns[0])
                plt.ylabel(df.columns[1])
                plot_file = "data_plot.png"
                plt.savefig(plot_file)
                plt.close()
                return f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {plot_file}"
            else:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

class ImageTool(BaseTool):
    name = "ImageTool"
    description = "–†–∞–±–æ—Ç–∞–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, –±–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞."

    def _run(self, action: str, url=None, path=None, width=None, height=None):
        try:
            if action == "download" and url:
                response = requests.get(url)
                img = Image.open(BytesIO(response.content))
                save_path = path or f"image_{int(time.time())}.jpg"
                img.save(save_path)
                return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {save_path}"
            
            elif action == "resize" and path:
                img = Image.open(path)
                if width and height:
                    resized = img.resize((width, height))
                    save_path = f"resized_{os.path.basename(path)}"
                    resized.save(save_path)
                    return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {save_path}"
                else:
                    return "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —É–∫–∞–∂–∏—Ç–µ width –∏ height"
            else:
                return "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ImageTool"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"

class CSVTool(BaseTool):
    name = "CSVTool"
    description = "–†–∞–±–æ—Ç–∞–µ—Ç —Å CSV —Ñ–∞–π–ª–∞–º–∏ - —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å, –æ–±—Ä–∞–±–æ—Ç–∫–∞."

    def _run(self, action: str, filename=None, data=None):
        try:
            if action == "read" and filename:
                rows = []
                with open(filename, 'r', newline='', encoding='utf-8') as csvfile:
                    reader = csv.DictReader(csvfile)
                    for row in reader:
                        rows.append(dict(row))
                return rows
            
            elif action == "write" and filename and data:
                if not data or not isinstance(data, list) or not isinstance(data[0], dict):
                    return "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π"
                
                fieldnames = data[0].keys()
                with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    writer.writeheader()
                    writer.writerows(data)
                return f"CSV —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ {filename}"
            
            else:
                return "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è CSVTool"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å CSV: {str(e)}"

from crewai import Agent, Task, Crew
from dotenv import load_dotenv
import os

class AIAgent:
    def __init__(self, model_manager):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π
        self.model_manager = model_manager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.tools = [
            FileTool(), TerminalTool(), WebSearchTool(),
            PDFReaderTool(), GitTool(), SQLiteTool(), HTMLScraperTool(),
            JSONTool(), APITool(), DataAnalysisTool(), ImageTool(), CSVTool()
        ]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        self.create_agent()
    
    def create_agent(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª–∏."""
        provider = self.model_manager.current_provider
        model = self.model_manager.current_model
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        if provider == "openai":
            self.agent = Agent(
                role="Full-Stack Autonomous Agent",
                goal="–í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                backstory="–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º.",
                tools=self.tools,
                verbose=True,
                llm=model
            )
        elif provider == "anthropic":
            from langchain.llms import Anthropic
            llm = Anthropic(model=model)
            self.agent = Agent(
                role="Full-Stack Autonomous Agent",
                goal="–í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                backstory="–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º.",
                tools=self.tools,
                verbose=True,
                llm=llm
            )
        elif provider in ["lm-studio-local", "lm-studio-remote", "ollama"]:
            from langchain.llms import OpenAI
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            base_url = os.getenv("OPENAI_API_BASE")
            api_key = os.getenv("OPENAI_API_KEY")
            
            model_name = "local-model"
            if provider == "ollama":
                model_name = model
            elif provider == "lm-studio-remote":
                model_name = "remote-model"
                
            llm = OpenAI(
                base_url=base_url,
                api_key=api_key,
                model_name=model_name
            )
            
            self.agent = Agent(
                role="Full-Stack Autonomous Agent",
                goal="–í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                backstory="–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º.",
                tools=self.tools,
                verbose=True,
                llm=llm
            )
        elif provider == "together":
            from langchain.llms import Together
            llm = Together(model=model)
            self.agent = Agent(
                role="Full-Stack Autonomous Agent",
                goal="–í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                backstory="–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º.",
                tools=self.tools,
                verbose=True,
                llm=llm
            )
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.agent = Agent(
                role="Full-Stack Autonomous Agent",
                goal="–í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                backstory="–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º.",
                tools=self.tools,
                verbose=True
            )
    
    def create_task(self, description, expected_output="–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –∞–≥–µ–Ω—Ç–∞."""
        return Task(
            description=description,
            expected_output=expected_output,
            agent=self.agent
        )
    
    def run_task(self, task_description):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
        task = self.create_task(task_description)
        crew = Crew(
            agents=[self.agent],
            tasks=[task]
        )
        
        result = crew.kickoff()
        return result

def display_menu():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏."""
    print("\n" + "="*50)
    print("–ê–í–¢–û–ù–û–ú–ù–´–ô AI-–ê–ì–ï–ù–¢".center(50))
    print("="*50)
    print("\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
    print("1. –í—ã–±—Ä–∞—Ç—å LLM –º–æ–¥–µ–ª—å")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É")
    print("0. –í—ã—Ö–æ–¥")
    print("="*50)

def display_tasks_menu():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–∞–¥–∞—á."""
    print("\n" + "="*50)
    print("–í–´–ë–û–† –ó–ê–î–ê–ß–ò".center(50))
    print("="*50)
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:")
    print("1. –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ Python —Å –±–∞–∑–æ–π SQLite")
    print("2. –°–æ–∑–¥–∞—Ç—å Telegram-–±–æ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫")
    print("3. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞")
    print("4. –°–≤–æ—è –∑–∞–¥–∞—á–∞ (–≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ)")
    print("0. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    print("="*50)

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    dependency_manager = DependencyManager()
    if not dependency_manager.check_and_install_dependencies():
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –í—ã—Ö–æ–¥...")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    model_manager = ModelManager()
    model_manager.current_provider = "lm-studio-remote"
    model_manager.current_model = "remote-model"
    model_manager.save_config()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model_manager.update_env_file()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
    agent = AIAgent(model_manager)
    
    # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∑–∞–¥–∞—á–∏
    print(f"\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {model_manager.models_config[model_manager.current_provider]['name']} ({model_manager.current_model})")
    print(f"URL: {model_manager.models_config[model_manager.current_provider]['env_vars']['OPENAI_API_BASE']}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –∑–∞–¥–∞—á–∏
    while True:
        display_tasks_menu()
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ")
        
        if choice == "0":
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            break
        
        elif choice == "1":
            task_description = """
            –°–æ–∑–¥–∞–π –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ Python —Å –±–∞–∑–æ–π SQLite –∏ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
            –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —É–º–µ—Ç—å:
            1. –î–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, email)
            2. –£–¥–∞–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
            3. –ò—Å–∫–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –∏–º–µ–Ω–∏
            4. –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            5. –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ SQLite –±–∞–∑—É
            
            –°–æ–∑–¥–∞–π —Ñ–∞–π–ª address_book.py —Å –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã.
            """
                
                elif task_choice == "1":
                    task_description = """
                    –°–æ–∑–¥–∞–π –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ Python —Å –±–∞–∑–æ–π SQLite –∏ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
                    –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —É–º–µ—Ç—å:
                    1. –î–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, email)
                    2. –£–¥–∞–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
                    3. –ò—Å–∫–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –∏–º–µ–Ω–∏
                    4. –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
                    5. –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ SQLite –±–∞–∑—É
                    
                    –°–æ–∑–¥–∞–π —Ñ–∞–π–ª address_book.py —Å –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã.
                    """
                
                elif task_choice == "2":
                    task_description = """
                    –°–æ–∑–¥–∞–π Telegram-–±–æ—Ç–∞ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot.
                    –ë–æ—Ç –¥–æ–ª–∂–µ–Ω:
                    1. –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
                    2. –ü–∞—Ä—Å–∏—Ç—å HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    3. –ü–æ–∑–≤–æ–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                    4. –ò–º–µ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
                    
                    –°–æ–∑–¥–∞–π –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã, –≤–∫–ª—é—á–∞—è telegram_bot.py –∏ schema.sql.
                    """
                
                elif task_choice == "3":
                    task_description = """
                    –í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
                    
                    1. –°–æ–∑–¥–∞–π CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ 5 –≥–æ—Ä–æ–¥–∞—Ö (–Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞—Å–µ–ª–µ–Ω–∏–µ, —Å—Ç—Ä–∞–Ω–∞)
                    2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç CSV —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç
                    3. –°–æ—Ö—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON —Ñ–∞–π–ª
                    4. –°–æ–∑–¥–∞–π SQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç—É–¥–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
                    5. –í—ã–ø–æ–ª–Ω–∏ SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º > 1 –º–ª–Ω
                    6. –°–∫–∞—á–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º
                    
                    –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏ –≤ –ø–∞–ø–∫—É 'results'.
                    """
                
                elif task_choice == "4":
                    print("\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏:")
                    task_description = input("> ")
                
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")
                    continue
                
                # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
                print(f"\n–ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –º–æ–¥–µ–ª—å—é: {model_manager.models_config[model_manager.current_provider]['name']} ({model_manager.current_model})...")
                try:
                    result = agent.run_task(task_description)
                    print("\n" + "="*50)
                    print("–†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø:".center(50))
                    print("="*50)
                    print(result)
                    print("="*50)
                    
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    break
                
                except Exception as e:
                    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
                    if model_manager.current_provider in ["lm-studio", "ollama"]:
                        print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä {model_manager.current_provider} –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É.")
                    else:
                        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π –≤ —Ñ–∞–π–ª–µ .env")
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    break
        
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            continue

if __name__ == "__main__":
    main()



üìÑ README.md
# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–∞

- FileTool ‚Äî —Å–æ–∑–¥–∞—ë—Ç/–∏–∑–º–µ–Ω—è–µ—Ç —Ñ–∞–π–ª—ã
- TerminalTool ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç bash/terminal –∫–æ–º–∞–Ω–¥—ã
- WebSearchTool ‚Äî –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–Ω–ª–∞–π–Ω
- PDFReaderTool ‚Äî —á–∏—Ç–∞–µ—Ç PDF —Ñ–∞–π–ª—ã
- GitTool ‚Äî –¥–µ–ª–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã, –ø—É—à–∏
- SQLiteTool ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç SQL-–±–∞–∑–æ–π
- HTMLScraperTool ‚Äî —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã

–ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏:
> –°–¥–µ–ª–∞–π Telegram-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ SQLite –∏ –ø–∞—Ä—Å–∏—Ç –∏—Ö HTML.

–ê–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç –≤—Å—ë –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ.


üìÑ requirements.txt
crewai
langchain
openai
python-dotenv
pypdf2
duckduckgo-search
sqlalchemy
streamlit
gitpython
playwright
beautifulsoup4
requests
TTS
soundfile
sounddevice
numpy

üìÑ run.py
import os
import sys
import subprocess
from dotenv import load_dotenv
from crewai import Agent, Task, Crew
from tools import FileTool, TerminalTool, WebSearchTool, PDFReaderTool, GitTool, SQLiteTool, HTMLScraperTool

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
os.environ["OPENAI_API_KEY"] = "lm-studio"
os.environ["OPENAI_API_BASE"] = "http://26.224.68.101:1234/v1"

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    required_packages = [
        "crewai", "langchain", "openai", "python-dotenv", "pypdf2",
        "duckduckgo-search", "sqlalchemy", "gitpython",
        "beautifulsoup4", "requests"
    ]
    
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    missing_packages = []
    
    try:
        import pkg_resources
        installed_packages = {pkg.key for pkg in pkg_resources.working_set}
        
        for package in required_packages:
            package_name = package.split('==')[0].lower()
            if package_name not in installed_packages:
                missing_packages.append(package)
    except:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã.")
        return False
    
    if missing_packages:
        print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤...")
        
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install"] + missing_packages)
            print("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞–∫–µ—Ç–æ–≤: {str(e)}")
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç—ã –≤—Ä—É—á–Ω—É—é: pip install -r requirements.txt")
            return False
    else:
        print("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    
    return True

def run_agent():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    tools = [
        FileTool(), TerminalTool(), WebSearchTool(),
        PDFReaderTool(), GitTool(), SQLiteTool(), HTMLScraperTool()
    ]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    agent = Agent(
        role="Full-Stack Autonomous Agent",
        goal="–í—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        backstory="–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º.",
        tools=tools,
        verbose=True
    )
    
    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
    print("\n" + "="*50)
    print("–ê–í–¢–û–ù–û–ú–ù–´–ô AI-–ê–ì–ï–ù–¢".center(50))
    print("="*50)
    print(f"\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: LM Studio (remote)")
    print(f"URL: http://26.224.68.101:1234/v1")
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:")
    print("1. –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ Python —Å –±–∞–∑–æ–π SQLite")
    print("2. –°–æ–∑–¥–∞—Ç—å Telegram-–±–æ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–æ–∫")
    print("3. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞")
    print("4. –°–≤–æ—è –∑–∞–¥–∞—á–∞ (–≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ)")
    print("0. –í—ã—Ö–æ–¥")
    print("="*50)
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ")
    
    if choice == "0":
        print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
        return
    
    elif choice == "1":
        task_description = """
        –°–æ–∑–¥–∞–π –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ Python —Å –±–∞–∑–æ–π SQLite –∏ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —É–º–µ—Ç—å:
        1. –î–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, email)
        2. –£–¥–∞–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
        3. –ò—Å–∫–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –∏–º–µ–Ω–∏
        4. –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        5. –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ SQLite –±–∞–∑—É
        
        –°–æ–∑–¥–∞–π —Ñ–∞–π–ª address_book.py —Å –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã.
        """
    
    elif choice == "2":
        task_description = """
        –°–æ–∑–¥–∞–π Telegram-–±–æ—Ç–∞ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot.
        –ë–æ—Ç –¥–æ–ª–∂–µ–Ω:
        1. –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
        2. –ü–∞—Ä—Å–∏—Ç—å HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        3. –ü–æ–∑–≤–æ–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        4. –ò–º–µ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
        
        –°–æ–∑–¥–∞–π –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã, –≤–∫–ª—é—á–∞—è telegram_bot.py –∏ schema.sql.
        """
    
    elif choice == "3":
        task_description = """
        –í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
        
        1. –°–æ–∑–¥–∞–π CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ 5 –≥–æ—Ä–æ–¥–∞—Ö (–Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞—Å–µ–ª–µ–Ω–∏–µ, —Å—Ç—Ä–∞–Ω–∞)
        2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç CSV —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç
        3. –°–æ—Ö—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON —Ñ–∞–π–ª
        4. –°–æ–∑–¥–∞–π SQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç—É–¥–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
        5. –í—ã–ø–æ–ª–Ω–∏ SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º > 1 –º–ª–Ω
        6. –°–∫–∞—á–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º
        
        –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏ –≤ –ø–∞–ø–∫—É 'results'.
        """
    
    elif choice == "4":
        print("\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏:")
        task_description = input("> ")
    
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
    print(f"\n–ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é LM Studio...")
    try:
        task = Task(
            description=task_description,
            expected_output="–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏",
            agent=agent
        )
        
        crew = Crew(
            agents=[agent],
            tasks=[task]
        )
        
        result = crew.kickoff()
        print("\n" + "="*50)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø:".center(50))
        print("="*50)
        print(result)
        print("="*50)
        
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
        print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä LM Studio –ø–æ –∞–¥—Ä–µ—Å—É: http://26.224.68.101:1234")

if __name__ == "__main__":
    if check_dependencies():
        run_agent()


üìÑ SETUP.md
# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–µ–∫—Ç–∞

## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
   ```
   pip install -r requirements.txt
   ```

2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ LM Studio:
   - –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ [LM Studio](https://lmstudio.ai/)
   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ LM Studio –Ω–∞ –ø–æ—Ä—Ç—É 1234
   - –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Mistral, Llama –∏–ª–∏ –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å —Å —Ö–æ—Ä–æ—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞)

3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª:
   - OPENAI_API_KEY=lm-studio (—É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
   - OPENAI_API_BASE=http://localhost:1234/v1 (—É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
   - SERPER_API_KEY=your-serper-key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≤–µ–±-–ø–æ–∏—Å–∫–∞)

## –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤

### –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
```
python agent.py
```
–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞—Å—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É —Å –±–∞–∑–æ–π SQLite –∏ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.

### –ü—Ä–∏–º–µ—Ä —Å Telegram –±–æ—Ç–æ–º
```
python example_task.py
```
–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞—Å—Ç Telegram-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ SQLite –∏ –ø–∞—Ä—Å–∏—Ç –∏—Ö HTML.

### –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö
```
python advanced_example.py
```
–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å CSV, JSON, SQL –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

- `tools.py` - –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–∞
- `advanced_tools.py` - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
- `agent.py` - –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∞–≥–µ–Ω—Ç–∞
- `example_task.py` - –ø—Ä–∏–º–µ—Ä —Å Telegram –±–æ—Ç–æ–º
- `advanced_example.py` - –ø—Ä–∏–º–µ—Ä —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö
- `requirements.txt` - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
- `.env` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π

## –ü—Ä–∏–º–µ—á–∞–Ω–∏—è

- –î–ª—è —Ä–∞–±–æ—Ç—ã —Å LM Studio –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –±—ã–ª –∑–∞–ø—É—â–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞–≥–µ–Ω—Ç–∞
- –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, GitTool) –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
- –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã


üìÑ silero_simple.py
import torch
import sounddevice as sd

def main():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Silero TTS...")
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
    speakers = {
        'aidar': '–º—É–∂—Å–∫–æ–π',
        'baya': '–∂–µ–Ω—Å–∫–∏–π',
        'kseniya': '–∂–µ–Ω—Å–∫–∏–π',
        'xenia': '–∂–µ–Ω—Å–∫–∏–π'
    }
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
        
        model, _ = torch.hub.load(repo_or_dir='snakers4/silero-models',
                                model='silero_tts',
                                language='ru',
                                speaker='v3_1_ru')
        model.to(device)
        
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å:")
            for i, (speaker_id, gender) in enumerate(speakers.items(), 1):
                print(f"{i}. {speaker_id} ({gender})")
            print("0. –í—ã—Ö–æ–¥")
            
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            
            if choice == '0':
                break
                
            try:
                speaker_id = list(speakers.keys())[int(choice)-1]
                text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: ")
                
                if not text:
                    text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                
                print(f"\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ –≥–æ–ª–æ—Å–æ–º {speaker_id}...")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å
                audio = model.apply_tts(text=text,
                                     speaker=speaker_id,
                                     sample_rate=48000)
                
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                print("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
                sd.play(audio.cpu().numpy(), 48000)
                sd.wait()
                
            except (ValueError, IndexError):
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
        print("\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("pip install torch torchaudio sounddevice")

if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç Silero TTS ===\n")
    main()


üìÑ silero_tts_test.py
import torch
import sounddevice as sd
import time

def main():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CUDA:", "–î–æ—Å—Ç—É–ø–Ω–æ" if torch.cuda.is_available() else "–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
    
    try:
        print("\n–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Silero TTS...")
        language = 'ru'
        model_id = 'v3_1_ru'
        sample_rate = 48000
        speaker = 'aidar'  # 'aidar', 'baya', 'kseniya', 'xenia', 'random'
        put_accent = True
        put_yo = True
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
        
        model, _ = torch.hub.load(repo_or_dir='snakers4/silero-models',
                                model='silero_tts',
                                language=language,
                                speaker=model_id)
        model.to(device)
        
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
        print("1. aidar (–º—É–∂—Å–∫–æ–π)")
        print("2. baya (–∂–µ–Ω—Å–∫–∏–π)")
        print("3. kseniya (–∂–µ–Ω—Å–∫–∏–π)")
        print("4. xenia (–∂–µ–Ω—Å–∫–∏–π)")
        
        while True:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å (1-4) –∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip().lower()
            
            if choice in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                break
                
            voice_map = {
                '1': 'aidar',
                '2': 'baya',
                '3': 'kseniya',
                '4': 'xenia'
            }
            
            if choice not in voice_map:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")
                continue
                
            speaker = voice_map[choice]
            text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: ").strip()
            
            if not text:
                text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–∞."
            
            print(f"\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ —Å –≥–æ–ª–æ—Å–æ–º {speaker}...")
            
            try:
                audio = model.apply_tts(text=text,
                                     speaker=speaker,
                                     sample_rate=sample_rate,
                                     put_accent=put_accent,
                                     put_yo=put_yo)
                
                print("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ... (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
                sd.play(audio.cpu().numpy(), sample_rate)
                sd.wait()
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: {e}")
                
    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞: {e}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é PyTorch: pip install torch torchaudio")
        print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ sounddevice: pip install sounddevice")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ CUDA, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É")

if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç Silero TTS ===\n")
    main()


üìÑ simple_coqui_test.py
from TTS.api import TTS
import torch

def main():
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ TTS:")
    print("-" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    models = [
        "tts_models/ru/vits",
        "tts_models/multilingual/multi-dataset/your_tts",
        "tts_models/en/ek1/tacotron2"
    ]
    
    for i, model in enumerate(models, 1):
        print(f"{i}. {model}")
    
    try:
        choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (1-3): ")) - 1
        if 0 <= choice < len(models):
            model_name = models[choice]
            print(f"\n–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ {model_name}...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TTS
            tts = TTS(model_name=model_name, progress_bar=True, gpu=torch.cuda.is_available())
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
            if hasattr(tts, 'speakers') and tts.speakers is not None:
                print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:", tts.speakers)
            
            if hasattr(tts, 'language') and tts.language is not None:
                print("–Ø–∑—ã–∫ –º–æ–¥–µ–ª–∏:", tts.language)
                
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å
            while True:
                text = input("\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏): ")
                if text.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                    break
                
                output_file = "test_output.wav"
                print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏...")
                
                try:
                    tts.tts_to_file(text=text, file_path=output_file)
                    print(f"–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_file}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
                    try:
                        import sounddevice as sd
                        import soundfile as sf
                        data, samplerate = sf.read(output_file)
                        sd.play(data, samplerate)
                        sd.wait()
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ: {e}")
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: {e}")
                    
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
            
    except (ValueError, KeyboardInterrupt):
        print("\n–í—ã—Ö–æ–¥...")

if __name__ == "__main__":
    main()


üìÑ simple_run.py
import os
import sys
import subprocess
import importlib.util

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
os.environ["OPENAI_API_KEY"] = "lm-studio"
os.environ["OPENAI_API_BASE"] = "http://26.224.68.101:1234/v1"

def check_package(package_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞–∫–µ—Ç."""
    return importlib.util.find_spec(package_name) is not None

def install_package(package_name):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç."""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package_name])
        return True
    except:
        return False

def check_and_install_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    required_packages = ["openai", "python-dotenv"]
    
    for package in required_packages:
        if not check_package(package):
            print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ {package}...")
            if not install_package(package):
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}")
                return False
    
    return True

def run_simple_agent():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ OpenAI API."""
    try:
        import openai
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
        client = openai.OpenAI(
            api_key=os.environ["OPENAI_API_KEY"],
            base_url=os.environ["OPENAI_API_BASE"]
        )
        
        print("\n" + "="*50)
        print("–ü–†–û–°–¢–û–ô AI-–ê–ì–ï–ù–¢".center(50))
        print("="*50)
        print(f"\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: LM Studio (remote)")
        print(f"URL: {os.environ['OPENAI_API_BASE']}")
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:")
        print("1. –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ Python")
        print("2. –°–æ–∑–¥–∞—Ç—å Telegram-–±–æ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫")
        print("3. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞")
        print("4. –°–≤–æ—è –∑–∞–¥–∞—á–∞ (–≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ)")
        print("0. –í—ã—Ö–æ–¥")
        print("="*50)
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ")
        
        if choice == "0":
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            return
        
        elif choice == "1":
            task_description = """
            –°–æ–∑–¥–∞–π –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –Ω–∞ Python —Å –±–∞–∑–æ–π SQLite –∏ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
            –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —É–º–µ—Ç—å:
            1. –î–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, email)
            2. –£–¥–∞–ª—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
            3. –ò—Å–∫–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –∏–º–µ–Ω–∏
            4. –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            5. –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ SQLite –±–∞–∑—É
            
            –°–æ–∑–¥–∞–π —Ñ–∞–π–ª address_book.py —Å –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã.
            """
        
        elif choice == "2":
            task_description = """
            –°–æ–∑–¥–∞–π Telegram-–±–æ—Ç–∞ –Ω–∞ Python —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot.
            –ë–æ—Ç –¥–æ–ª–∂–µ–Ω:
            1. –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
            2. –ü–∞—Ä—Å–∏—Ç—å HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            3. –ü–æ–∑–≤–æ–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            4. –ò–º–µ—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
            
            –°–æ–∑–¥–∞–π –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã, –≤–∫–ª—é—á–∞—è telegram_bot.py –∏ schema.sql.
            """
        
        elif choice == "3":
            task_description = """
            –í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
            
            1. –°–æ–∑–¥–∞–π CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ 5 –≥–æ—Ä–æ–¥–∞—Ö (–Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞—Å–µ–ª–µ–Ω–∏–µ, —Å—Ç—Ä–∞–Ω–∞)
            2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç CSV —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç
            3. –°–æ—Ö—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON —Ñ–∞–π–ª
            4. –°–æ–∑–¥–∞–π SQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç—É–¥–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
            5. –í—ã–ø–æ–ª–Ω–∏ SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º > 1 –º–ª–Ω
            
            –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏ –≤ –ø–∞–ø–∫—É 'results'.
            """
        
        elif choice == "4":
            print("\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏:")
            task_description = input("> ")
        
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏
        print(f"\n–ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é LM Studio...")
        
        response = client.chat.completions.create(
            model="saiga_mistral_7b_gguf",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å saiga_mistral_7b_gguf
            messages=[
                {"role": "system", "content": "–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏, API –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."},
                {"role": "user", "content": task_description}
            ],
            temperature=0.7,
            max_tokens=4000
        )
        
        result = response.choices[0].message.content
        
        print("\n" + "="*50)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø:".center(50))
        print("="*50)
        print(result)
        print("="*50)
        
        # –°–ø—Ä–æ—Å–∏–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
        save_choice = input("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª? (y/n): ")
        if save_choice.lower() == 'y':
            filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, result.txt): ")
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(result)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª {filename}")
        
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä LM Studio –ø–æ –∞–¥—Ä–µ—Å—É: {os.environ['OPENAI_API_BASE']}")

if __name__ == "__main__":
    if check_and_install_dependencies():
        run_simple_agent()
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –í—ã—Ö–æ–¥...")


üìÑ simple_voice_test.py
import pyttsx3

def list_voices():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞"""
    engine = pyttsx3.init()
    voices = engine.getProperty('voices')
    
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
    for i, voice in enumerate(voices):
        print(f"\n–ì–æ–ª–æ—Å #{i+1}:")
        print(f"–ò–º—è: {voice.name}")
        print(f"ID: {voice.id}")
        if hasattr(voice, 'languages') and voice.languages:
            print(f"–Ø–∑—ã–∫–∏: {voice.languages}")
    
    return voices

def test_voice(voice_id, text):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID"""
    try:
        engine = pyttsx3.init()
        engine.setProperty('voice', voice_id)
        engine.setProperty('rate', 150)  # –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏
        engine.setProperty('volume', 0.9)  # –ì—Ä–æ–º–∫–æ—Å—Ç—å (0.0-1.0)
        
        print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å: {voice_id}")
        print(f"–¢–µ–∫—Å—Ç: {text}")
        print("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
        
        engine.say(text)
        engine.runAndWait()
        print("–ì–æ—Ç–æ–≤–æ!")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        return False

if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ ===\n")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
    voices = list_voices()
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å –ø–æ –Ω–æ–º–µ—Ä—É")
        print("2. –í—ã—Ö–æ–¥")
        
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
        
        if choice == "1":
            try:
                voice_num = int(input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ–ª–æ—Å–∞ (1-{len(voices)}): ").strip())
                if 1 <= voice_num <= len(voices):
                    text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ): ").strip()
                    if not text:
                        text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–∞."
                    test_voice(voices[voice_num-1].id, text)
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥–æ–ª–æ—Å–∞")
            except ValueError:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                
        elif choice == "2":
            print("–í—ã—Ö–æ–¥...")
            break
            
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


üìÑ test_connection.py
import requests
import json

# URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
base_url = "http://26.224.68.101:1234/v1"
models_url = f"{base_url}/models"

print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É LM Studio –ø–æ –∞–¥—Ä–µ—Å—É: {base_url}")

try:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    response = requests.get(models_url)
    
    if response.status_code == 200:
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        models = response.json()
        print(json.dumps(models, indent=2, ensure_ascii=False))
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
except Exception as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}")
    print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ:")
    print("1. –°–µ—Ä–≤–µ—Ä LM Studio –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("2. API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É")
    print("3. –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–æ–º")


üìÑ test_tts_simple.py
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ TTS...")

try:
    from TTS.api import TTS
    import torch
    
    print("TTS —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CUDA
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å
    print("\n–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å...")
    try:
        tts = TTS(model_name="tts_models/ru/vits", progress_bar=False, gpu=('cuda' in device))
        print("–†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:", tts.speakers)
        
        # –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å
        print("\n–ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å...")
        tts.tts_to_file(text="–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", 
                       file_path="test_output.wav",
                       speaker=tts.speakers[0] if tts.speakers else None)
        print("–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ test_output.wav")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
    
except Exception as e:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    print("\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. pip uninstall -y TTS")
    print("2. pip install TTS==0.22.0")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω PyTorch —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CUDA (–µ—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞)")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π")


üìÑ test_vits.py
from TTS.api import TTS
import torch
import time

def main():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–π VITS –º–æ–¥–µ–ª–∏...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—É—Å—Å–∫—É—é VITS –º–æ–¥–µ–ª—å
        tts = TTS(model_name="tts_models/ru/vits", progress_bar=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
        for i, speaker in enumerate(tts.speakers):
            print(f"{i+1}. {speaker}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞
        test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–∞."
        
        for i, speaker in enumerate(tts.speakers):
            print(f"\n–¢–µ—Å—Ç–∏—Ä—É—é –≥–æ–ª–æ—Å: {speaker}")
            output_file = f"output_{i+1}.wav"
            
            try:
                tts.tts_to_file(
                    text=test_text,
                    file_path=output_file,
                    speaker=speaker
                )
                print(f"–ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_file}")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å –≥–æ–ª–æ—Å–æ–º {speaker}: {str(e)}")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        print("\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£–¥–∞–ª–∏—Ç–µ –∫—ç—à TTS: rm -r ~/.local/share/tts")
        print("2. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TTS: pip install --force-reinstall TTS")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

if __name__ == "__main__":
    main()


üìÑ test_voice.py
import os
import sys
import pyttsx3
import requests
import tempfile
import vlc
import time

class VoiceTester:
    def __init__(self):
        self.engine = None
        self.voices = {}
        self._initialize()
    
    def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –¥–≤–∏–∂–æ–∫"""
        try:
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
            self.engine = pyttsx3.init()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
            voices = self.engine.getProperty('voices')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
            for i, voice in enumerate(voices):
                print(f"{i+1}. {voice.name}")
                if hasattr(voice, 'languages') and voice.languages:
                    print(f"   –Ø–∑—ã–∫–∏: {voice.languages}")
                if hasattr(voice, 'id'):
                    print(f"   ID: {voice.id}")
                print()
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞
            ru_voices = [v for v in voices if hasattr(v, 'languages') and any('ru' in lang.lower() for lang in getattr(v, 'languages', []))]
            
            if not ru_voices:
                print("–†—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ")
                ru_voices = voices
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
            self.voices = {
                "–º—É–∂—Å–∫–æ–π": {
                    "id": next((v.id for v in ru_voices if 'male' in v.name.lower() or '–º—É–∂—Å–∫' in v.name.lower() or v == ru_voices[0]), ru_voices[0].id),
                    "rate": 150,
                    "volume": 0.9
                },
                "–∂–µ–Ω—Å–∫–∏–π": {
                    "id": next((v.id for v in ru_voices if 'female' in v.name.lower() or '–∂–µ–Ω—Å–∫' in v.name.lower() or v == ru_voices[-1]), 
                               ru_voices[-1].id if len(ru_voices) > 1 else ru_voices[0].id),
                    "rate": 170,
                    "volume": 0.9
                }
            }
            
            print("\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
            for name, voice in self.voices.items():
                print(f"{name}: {voice['id']}")
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞: {str(e)}")
            return False
    
    def test_voice(self, text, voice_type="–º—É–∂—Å–∫–æ–π"):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å"""
        if not self.engine or voice_type not in self.voices:
            print("–û—à–∏–±–∫–∞: –≥–æ–ª–æ—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å: {voice_type}")
        print(f"–¢–µ–∫—Å—Ç: {text}")
        
        voice = self.voices[voice_type]
        self.engine.setProperty('voice', voice["id"])
        self.engine.setProperty('rate', voice["rate"])
        self.engine.setProperty('volume', voice["volume"])
        
        print("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
        self.engine.say(text)
        self.engine.runAndWait()
        print("–ì–æ—Ç–æ–≤–æ!")

def main():
    print("=== –¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ ===\n")
    
    tester = VoiceTester()
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –¢–µ—Å—Ç –º—É–∂—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞")
        print("2. –¢–µ—Å—Ç –∂–µ–Ω—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞")
        print("3. –í—ã—Ö–æ–¥")
        
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
        
        if choice == "1":
            text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ): ").strip()
            if not text:
                text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—É–∂—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞."
            tester.test_voice(text, "–º—É–∂—Å–∫–æ–π")
            
        elif choice == "2":
            text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ): ").strip()
            if not text:
                text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∂–µ–Ω—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞."
            tester.test_voice(text, "–∂–µ–Ω—Å–∫–∏–π")
            
        elif choice == "3":
            print("–í—ã—Ö–æ–¥...")
            break
            
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()


üìÑ tools.py
from crewai_tools import BaseTool
import subprocess
import os
import requests
import sqlite3
from bs4 import BeautifulSoup
from PyPDF2 import PdfReader
from duckduckgo_search import DDGS
import git

class FileTool(BaseTool):
    name = "FileTool"
    description = "–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º."

    def _run(self, content: str, filename: str = "main.py"):
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        return f"–§–∞–π–ª {filename} —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω."

class TerminalTool(BaseTool):
    name = "TerminalTool"
    description = "–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –≤—ã–≤–æ–¥."

    def _run(self, command: str):
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            return result.stdout or result.stderr
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"

class WebSearchTool(BaseTool):
    name = "WebSearch"
    description = "–ò—â–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é DuckDuckGo."

    def _run(self, query: str):
        with DDGS() as ddgs:
            results = [r for r in ddgs.text(query, max_results=3)]
            return "\n".join([r['body'] for r in results])

class PDFReaderTool(BaseTool):
    name = "PDFReader"
    description = "–ß–∏—Ç–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç PDF-—Ñ–∞–π–ª."

    def _run(self, path: str):
        reader = PdfReader(path)
        text = "\n".join([page.extract_text() for page in reader.pages if page.extract_text()])
        return text[:3000]

class GitTool(BaseTool):
    name = "GitTool"
    description = "–í—ã–ø–æ–ª–Ω—è–µ—Ç git –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ."

    def _run(self, action: str):
        try:
            repo = git.Repo('.')
            if action == "commit":
                repo.git.add(A=True)
                repo.index.commit("auto-commit")
                return "–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã."
            elif action == "push":
                repo.git.push()
                return "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."
            else:
                return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ {action}"
        except Exception as e:
            return str(e)

class SQLiteTool(BaseTool):
    name = "SQLiteTool"
    description = "–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    def _run(self, query: str):
        conn = sqlite3.connect("local.db")
        cur = conn.cursor()
        try:
            cur.execute(query)
            rows = cur.fetchall()
            conn.commit()
            return str(rows)
        except Exception as e:
            return str(e)
        finally:
            conn.close()

class HTMLScraperTool(BaseTool):
    name = "HTMLScraper"
    description = "–°–∫–∞—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ URL –∏ –ø–∞—Ä—Å–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."

    def _run(self, url: str):
        try:
            response = requests.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')
            return soup.get_text()[:3000]
        except Exception as e:
            return str(e)


üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.txt

